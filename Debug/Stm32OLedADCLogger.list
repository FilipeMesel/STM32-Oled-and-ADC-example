
Stm32OLedADCLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002898  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800727c  0800727c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800727c  0800727c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800727c  0800727c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000098  0800731c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800731c  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef31  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002797  00000000  00000000  0002eff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00031790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00032708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001936e  00000000  00000000  00033560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012db1  00000000  00000000  0004c8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090300  00000000  00000000  0005f67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef97f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004404  00000000  00000000  000ef9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080049cc 	.word	0x080049cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080049cc 	.word	0x080049cc

0800014c <fm_api_adc_init>:
 * Return: 0 => OK -1=> false
 * Author: Filipe Mesel Lobo Costa Cardoso <lipemesel@hotmail.com>
 * Version: v1.0
 * Date: 04/02/2023
 *------------------------------------------------------------------------------*/
int8_t fm_api_adc_init() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(ADC.Open() == 0) {
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <fm_api_adc_init+0x1c>)
 8000152:	689b      	ldr	r3, [r3, #8]
 8000154:	4798      	blx	r3
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d101      	bne.n	8000160 <fm_api_adc_init+0x14>
		return ADC_OK;
 800015c:	2300      	movs	r3, #0
 800015e:	e001      	b.n	8000164 <fm_api_adc_init+0x18>
	}else {
		return ADC_ERROR;
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000164:	4618      	mov	r0, r3
 8000166:	bd80      	pop	{r7, pc}
 8000168:	20000000 	.word	0x20000000

0800016c <fm_api_adc_get_value>:
 * Return: ADC Value
 * Author: Filipe Mesel Lobo Costa Cardoso <lipemesel@hotmail.com>
 * Version: v1.0
 * Date: 04/02/2023
 *------------------------------------------------------------------------------*/
uint16_t fm_api_adc_get_value(uint8_t uAdcSelectedChannel) {
 800016c:	b580      	push	{r7, lr}
 800016e:	b084      	sub	sp, #16
 8000170:	af00      	add	r7, sp, #0
 8000172:	4603      	mov	r3, r0
 8000174:	71fb      	strb	r3, [r7, #7]
	uint16_t uAdcValue = ADC.Read(uAdcSelectedChannel);
 8000176:	4b06      	ldr	r3, [pc, #24]	; (8000190 <fm_api_adc_get_value+0x24>)
 8000178:	68db      	ldr	r3, [r3, #12]
 800017a:	79fa      	ldrb	r2, [r7, #7]
 800017c:	4610      	mov	r0, r2
 800017e:	4798      	blx	r3
 8000180:	4603      	mov	r3, r0
 8000182:	81fb      	strh	r3, [r7, #14]

	return uAdcValue;
 8000184:	89fb      	ldrh	r3, [r7, #14]

}
 8000186:	4618      	mov	r0, r3
 8000188:	3710      	adds	r7, #16
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	20000000 	.word	0x20000000

08000194 <fm_api_oled_init>:
 * Author: Filipe Mesel Lobo Costa Cardoso <lipemesel@hotmail.com>
 * Version: v1.0
 * Date: 04/02/2023
 *------------------------------------------------------------------------------*/
void fm_api_oled_init()
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8000198:	f000 fb3a 	bl	8000810 <SSD1306_Init>

}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}

080001a0 <fm_api_oled_write>:
 * Version: v1.0
 * Date: 04/02/2023
 *------------------------------------------------------------------------------*/

void fm_api_oled_write(char* str, int iSize, uint16_t uxPosition, uint16_t uyPosition,  uint8_t uFont)
{
 80001a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001a4:	b087      	sub	sp, #28
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	60f8      	str	r0, [r7, #12]
 80001aa:	60b9      	str	r1, [r7, #8]
 80001ac:	4611      	mov	r1, r2
 80001ae:	461a      	mov	r2, r3
 80001b0:	460b      	mov	r3, r1
 80001b2:	80fb      	strh	r3, [r7, #6]
 80001b4:	4613      	mov	r3, r2
 80001b6:	80bb      	strh	r3, [r7, #4]
 80001b8:	466b      	mov	r3, sp
 80001ba:	461e      	mov	r6, r3
	SSD1306_GotoXY (uxPosition,uyPosition);
 80001bc:	88ba      	ldrh	r2, [r7, #4]
 80001be:	88fb      	ldrh	r3, [r7, #6]
 80001c0:	4611      	mov	r1, r2
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fc8c 	bl	8000ae0 <SSD1306_GotoXY>
	char buffer[iSize];
 80001c8:	68b9      	ldr	r1, [r7, #8]
 80001ca:	1e4b      	subs	r3, r1, #1
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	460a      	mov	r2, r1
 80001d0:	2300      	movs	r3, #0
 80001d2:	4690      	mov	r8, r2
 80001d4:	4699      	mov	r9, r3
 80001d6:	f04f 0200 	mov.w	r2, #0
 80001da:	f04f 0300 	mov.w	r3, #0
 80001de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80001e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80001e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80001ea:	460a      	mov	r2, r1
 80001ec:	2300      	movs	r3, #0
 80001ee:	4614      	mov	r4, r2
 80001f0:	461d      	mov	r5, r3
 80001f2:	f04f 0200 	mov.w	r2, #0
 80001f6:	f04f 0300 	mov.w	r3, #0
 80001fa:	00eb      	lsls	r3, r5, #3
 80001fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000200:	00e2      	lsls	r2, r4, #3
 8000202:	460b      	mov	r3, r1
 8000204:	3307      	adds	r3, #7
 8000206:	08db      	lsrs	r3, r3, #3
 8000208:	00db      	lsls	r3, r3, #3
 800020a:	ebad 0d03 	sub.w	sp, sp, r3
 800020e:	466b      	mov	r3, sp
 8000210:	3300      	adds	r3, #0
 8000212:	613b      	str	r3, [r7, #16]
	memcpy(buffer, str, iSize);
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	461a      	mov	r2, r3
 8000218:	68f9      	ldr	r1, [r7, #12]
 800021a:	6938      	ldr	r0, [r7, #16]
 800021c:	f003 ff54 	bl	80040c8 <memcpy>
	switch(uFont) {
 8000220:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000224:	2b02      	cmp	r3, #2
 8000226:	d012      	beq.n	800024e <fm_api_oled_write+0xae>
 8000228:	2b02      	cmp	r3, #2
 800022a:	dc16      	bgt.n	800025a <fm_api_oled_write+0xba>
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <fm_api_oled_write+0x96>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d006      	beq.n	8000242 <fm_api_oled_write+0xa2>
 8000234:	e011      	b.n	800025a <fm_api_oled_write+0xba>
	case FONT_7_X_10_PIXELS:
		SSD1306_Puts (buffer, &Font_7x10, 1);
 8000236:	2201      	movs	r2, #1
 8000238:	490b      	ldr	r1, [pc, #44]	; (8000268 <fm_api_oled_write+0xc8>)
 800023a:	6938      	ldr	r0, [r7, #16]
 800023c:	f000 fce6 	bl	8000c0c <SSD1306_Puts>
	break;
 8000240:	e00b      	b.n	800025a <fm_api_oled_write+0xba>
	case FONT_11_X_18_PIXELS:
		SSD1306_Puts (buffer, &Font_11x18, 1);
 8000242:	2201      	movs	r2, #1
 8000244:	4909      	ldr	r1, [pc, #36]	; (800026c <fm_api_oled_write+0xcc>)
 8000246:	6938      	ldr	r0, [r7, #16]
 8000248:	f000 fce0 	bl	8000c0c <SSD1306_Puts>

	break;
 800024c:	e005      	b.n	800025a <fm_api_oled_write+0xba>
	case FONT_16_X_26_PIXELS:
		SSD1306_Puts (buffer, &Font_16x26, 1);
 800024e:	2201      	movs	r2, #1
 8000250:	4907      	ldr	r1, [pc, #28]	; (8000270 <fm_api_oled_write+0xd0>)
 8000252:	6938      	ldr	r0, [r7, #16]
 8000254:	f000 fcda 	bl	8000c0c <SSD1306_Puts>

	break;
 8000258:	bf00      	nop
 800025a:	46b5      	mov	sp, r6

	}
}
 800025c:	bf00      	nop
 800025e:	371c      	adds	r7, #28
 8000260:	46bd      	mov	sp, r7
 8000262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000266:	bf00      	nop
 8000268:	20000010 	.word	0x20000010
 800026c:	20000018 	.word	0x20000018
 8000270:	20000020 	.word	0x20000020

08000274 <fm_api_oled_clear>:
 * Author: Filipe Mesel Lobo Costa Cardoso <lipemesel@hotmail.com>
 * Version: v1.0
 * Date: 04/02/2023
 *------------------------------------------------------------------------------*/
void fm_api_oled_clear()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8000278:	f000 fced 	bl	8000c56 <SSD1306_Clear>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <fm_api_oled_update_screen>:
 * Author: Filipe Mesel Lobo Costa Cardoso <lipemesel@hotmail.com>
 * Version: v1.0
 * Date: 04/02/2023
 *------------------------------------------------------------------------------*/
void fm_api_oled_update_screen()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	SSD1306_UpdateScreen();
 8000284:	f000 fb88 	bl	8000998 <SSD1306_UpdateScreen>
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}

0800028c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <MX_ADC1_Init+0x6c>)
 800029e:	4a17      	ldr	r2, [pc, #92]	; (80002fc <MX_ADC1_Init+0x70>)
 80002a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <MX_ADC1_Init+0x6c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <MX_ADC1_Init+0x6c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ae:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_ADC1_Init+0x6c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <MX_ADC1_Init+0x6c>)
 80002b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_ADC1_Init+0x6c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <MX_ADC1_Init+0x6c>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002c8:	480b      	ldr	r0, [pc, #44]	; (80002f8 <MX_ADC1_Init+0x6c>)
 80002ca:	f001 f81b 	bl	8001304 <HAL_ADC_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d10d      	bne.n	80002f0 <MX_ADC1_Init+0x64>
    return -1;
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002d4:	2305      	movs	r3, #5
 80002d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d8:	2301      	movs	r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_ADC1_Init+0x6c>)
 80002e6:	f001 fa73 	bl	80017d0 <HAL_ADC_ConfigChannel>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	e000      	b.n	80002f2 <MX_ADC1_Init+0x66>
    return -1;
 80002f0:	bf00      	nop
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200000b4 	.word	0x200000b4
 80002fc:	40012400 	.word	0x40012400

08000300 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <MX_ADC2_Init+0x6c>)
 8000312:	4a17      	ldr	r2, [pc, #92]	; (8000370 <MX_ADC2_Init+0x70>)
 8000314:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_ADC2_Init+0x6c>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <MX_ADC2_Init+0x6c>)
 800031e:	2200      	movs	r2, #0
 8000320:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <MX_ADC2_Init+0x6c>)
 8000324:	2200      	movs	r2, #0
 8000326:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_ADC2_Init+0x6c>)
 800032a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800032e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_ADC2_Init+0x6c>)
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <MX_ADC2_Init+0x6c>)
 8000338:	2201      	movs	r2, #1
 800033a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800033c:	480b      	ldr	r0, [pc, #44]	; (800036c <MX_ADC2_Init+0x6c>)
 800033e:	f000 ffe1 	bl	8001304 <HAL_ADC_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d10d      	bne.n	8000364 <MX_ADC2_Init+0x64>
    return -1;
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000348:	2306      	movs	r3, #6
 800034a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800034c:	2301      	movs	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4619      	mov	r1, r3
 8000358:	4804      	ldr	r0, [pc, #16]	; (800036c <MX_ADC2_Init+0x6c>)
 800035a:	f001 fa39 	bl	80017d0 <HAL_ADC_ConfigChannel>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	e000      	b.n	8000366 <MX_ADC2_Init+0x66>
    return -1;
 8000364:	bf00      	nop
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200000e4 	.word	0x200000e4
 8000370:	40012800 	.word	0x40012800

08000374 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b092      	sub	sp, #72	; 0x48
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2220      	movs	r2, #32
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f003 fea0 	bl	80040e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a4:	4b32      	ldr	r3, [pc, #200]	; (8000470 <MX_TIM1_Init+0xfc>)
 80003a6:	4a33      	ldr	r2, [pc, #204]	; (8000474 <MX_TIM1_Init+0x100>)
 80003a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003aa:	4b31      	ldr	r3, [pc, #196]	; (8000470 <MX_TIM1_Init+0xfc>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b2f      	ldr	r3, [pc, #188]	; (8000470 <MX_TIM1_Init+0xfc>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003b6:	4b2e      	ldr	r3, [pc, #184]	; (8000470 <MX_TIM1_Init+0xfc>)
 80003b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003be:	4b2c      	ldr	r3, [pc, #176]	; (8000470 <MX_TIM1_Init+0xfc>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003c4:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <MX_TIM1_Init+0xfc>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ca:	4b29      	ldr	r3, [pc, #164]	; (8000470 <MX_TIM1_Init+0xfc>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003d0:	4827      	ldr	r0, [pc, #156]	; (8000470 <MX_TIM1_Init+0xfc>)
 80003d2:	f003 f9e1 	bl	8003798 <HAL_TIM_PWM_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d13f      	bne.n	800045c <MX_TIM1_Init+0xe8>
  {
	  return -1;
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003dc:	2300      	movs	r3, #0
 80003de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003e8:	4619      	mov	r1, r3
 80003ea:	4821      	ldr	r0, [pc, #132]	; (8000470 <MX_TIM1_Init+0xfc>)
 80003ec:	f003 fd92 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d134      	bne.n	8000460 <MX_TIM1_Init+0xec>
  {
    return -1;
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f6:	2360      	movs	r3, #96	; 0x60
 80003f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003fe:	2300      	movs	r3, #0
 8000400:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000402:	2300      	movs	r3, #0
 8000404:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000406:	2300      	movs	r3, #0
 8000408:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800040a:	2300      	movs	r3, #0
 800040c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800040e:	2300      	movs	r3, #0
 8000410:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000416:	2200      	movs	r2, #0
 8000418:	4619      	mov	r1, r3
 800041a:	4815      	ldr	r0, [pc, #84]	; (8000470 <MX_TIM1_Init+0xfc>)
 800041c:	f003 faae 	bl	800397c <HAL_TIM_PWM_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d11e      	bne.n	8000464 <MX_TIM1_Init+0xf0>
  {
    return -1;
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800043a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800043e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4619      	mov	r1, r3
 8000448:	4809      	ldr	r0, [pc, #36]	; (8000470 <MX_TIM1_Init+0xfc>)
 800044a:	f003 fdc1 	bl	8003fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d109      	bne.n	8000468 <MX_TIM1_Init+0xf4>
    return -1;
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000454:	4806      	ldr	r0, [pc, #24]	; (8000470 <MX_TIM1_Init+0xfc>)
 8000456:	f000 fdb5 	bl	8000fc4 <HAL_TIM_MspPostInit>
 800045a:	e006      	b.n	800046a <MX_TIM1_Init+0xf6>
	  return -1;
 800045c:	bf00      	nop
 800045e:	e004      	b.n	800046a <MX_TIM1_Init+0xf6>
    return -1;
 8000460:	bf00      	nop
 8000462:	e002      	b.n	800046a <MX_TIM1_Init+0xf6>
    return -1;
 8000464:	bf00      	nop
 8000466:	e000      	b.n	800046a <MX_TIM1_Init+0xf6>
    return -1;
 8000468:	bf00      	nop

}
 800046a:	3748      	adds	r7, #72	; 0x48
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000114 	.word	0x20000114
 8000474:	40012c00 	.word	0x40012c00

08000478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047e:	f107 0320 	add.w	r3, r7, #32
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800049a:	4b22      	ldr	r3, [pc, #136]	; (8000524 <MX_TIM2_Init+0xac>)
 800049c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <MX_TIM2_Init+0xac>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_TIM2_Init+0xac>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <MX_TIM2_Init+0xac>)
 80004b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b6:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_TIM2_Init+0xac>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <MX_TIM2_Init+0xac>)
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004c2:	4818      	ldr	r0, [pc, #96]	; (8000524 <MX_TIM2_Init+0xac>)
 80004c4:	f003 f968 	bl	8003798 <HAL_TIM_PWM_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d121      	bne.n	8000512 <MX_TIM2_Init+0x9a>
  {
    return -1;
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ce:	2300      	movs	r3, #0
 80004d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d6:	f107 0320 	add.w	r3, r7, #32
 80004da:	4619      	mov	r1, r3
 80004dc:	4811      	ldr	r0, [pc, #68]	; (8000524 <MX_TIM2_Init+0xac>)
 80004de:	f003 fd19 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d116      	bne.n	8000516 <MX_TIM2_Init+0x9e>
  {
    return -1;
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e8:	2360      	movs	r3, #96	; 0x60
 80004ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	4619      	mov	r1, r3
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <MX_TIM2_Init+0xac>)
 8000500:	f003 fa3c 	bl	800397c <HAL_TIM_PWM_ConfigChannel>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d107      	bne.n	800051a <MX_TIM2_Init+0xa2>
    return -1;
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <MX_TIM2_Init+0xac>)
 800050c:	f000 fd5a 	bl	8000fc4 <HAL_TIM_MspPostInit>
 8000510:	e004      	b.n	800051c <MX_TIM2_Init+0xa4>
    return -1;
 8000512:	bf00      	nop
 8000514:	e002      	b.n	800051c <MX_TIM2_Init+0xa4>
    return -1;
 8000516:	bf00      	nop
 8000518:	e000      	b.n	800051c <MX_TIM2_Init+0xa4>
    return -1;
 800051a:	bf00      	nop

}
 800051c:	3728      	adds	r7, #40	; 0x28
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	2000015c 	.word	0x2000015c

08000528 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	ADC.uValue[ADC_CHANNEL_01] = HAL_ADC_GetValue(&hadc1);
 8000530:	4808      	ldr	r0, [pc, #32]	; (8000554 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000532:	f001 f875 	bl	8001620 <HAL_ADC_GetValue>
 8000536:	4603      	mov	r3, r0
 8000538:	b29a      	uxth	r2, r3
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_ADC_ConvCpltCallback+0x30>)
 800053c:	805a      	strh	r2, [r3, #2]
	ADC.uValue[ADC_CHANNEL_02] = HAL_ADC_GetValue(&hadc2);
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <HAL_ADC_ConvCpltCallback+0x34>)
 8000540:	f001 f86e 	bl	8001620 <HAL_ADC_GetValue>
 8000544:	4603      	mov	r3, r0
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_ADC_ConvCpltCallback+0x30>)
 800054a:	809a      	strh	r2, [r3, #4]
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200000b4 	.word	0x200000b4
 8000558:	20000000 	.word	0x20000000
 800055c:	200000e4 	.word	0x200000e4

08000560 <fm_adc_open>:
 * Author: Filipe Mesel Lobo Costa Cardoso <lipemesel@hotmail.com>
 * Version: v1.0
 * Date: 04/02/2023
 *------------------------------------------------------------------------------*/
static int8_t fm_adc_open (void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000564:	f7ff fe92 	bl	800028c <MX_ADC1_Init>
	MX_TIM2_Init();
 8000568:	f7ff ff86 	bl	8000478 <MX_TIM2_Init>
	MX_ADC2_Init();
 800056c:	f7ff fec8 	bl	8000300 <MX_ADC2_Init>
	MX_TIM1_Init();
 8000570:	f7ff ff00 	bl	8000374 <MX_TIM1_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000574:	2100      	movs	r1, #0
 8000576:	480b      	ldr	r0, [pc, #44]	; (80005a4 <fm_adc_open+0x44>)
 8000578:	f003 f95e 	bl	8003838 <HAL_TIM_PWM_Start>
	HAL_ADCEx_Calibration_Start(&hadc1);
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <fm_adc_open+0x48>)
 800057e:	f001 fabb 	bl	8001af8 <HAL_ADCEx_Calibration_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000582:	2100      	movs	r1, #0
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <fm_adc_open+0x4c>)
 8000586:	f003 f957 	bl	8003838 <HAL_TIM_PWM_Start>
	HAL_ADCEx_Calibration_Start(&hadc2);
 800058a:	4809      	ldr	r0, [pc, #36]	; (80005b0 <fm_adc_open+0x50>)
 800058c:	f001 fab4 	bl	8001af8 <HAL_ADCEx_Calibration_Start>

	ADC.uFlagEnable[0] = 1;
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <fm_adc_open+0x54>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
	ADC.uFlagEnable[1] = 1;
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <fm_adc_open+0x54>)
 8000598:	2201      	movs	r2, #1
 800059a:	705a      	strb	r2, [r3, #1]

	return 0;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000015c 	.word	0x2000015c
 80005a8:	200000b4 	.word	0x200000b4
 80005ac:	20000114 	.word	0x20000114
 80005b0:	200000e4 	.word	0x200000e4
 80005b4:	20000000 	.word	0x20000000

080005b8 <fm_adc_read>:
 * Author: Filipe Mesel Lobo Costa Cardoso <lipemesel@hotmail.com>
 * Version: v1.0
 * Date: 04/02/2023
 *------------------------------------------------------------------------------*/
static uint16_t fm_adc_read (uint8_t uAdcSelected)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	if(uAdcSelected == ADC_CHANNEL_01) {
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d10e      	bne.n	80005e6 <fm_adc_read+0x2e>
		HAL_ADC_Start_IT(&hadc1);
 80005c8:	4812      	ldr	r0, [pc, #72]	; (8000614 <fm_adc_read+0x5c>)
 80005ca:	f000 ff73 	bl	80014b4 <HAL_ADC_Start_IT>
		TIM2->CCR1 = (ADC.uValue[ADC_CHANNEL_01]<<4);
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <fm_adc_read+0x60>)
 80005d0:	885b      	ldrh	r3, [r3, #2]
 80005d2:	011a      	lsls	r2, r3, #4
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fe6e 	bl	80012bc <HAL_Delay>
		return ADC.uValue[ADC_CHANNEL_01];
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <fm_adc_read+0x60>)
 80005e2:	885b      	ldrh	r3, [r3, #2]
 80005e4:	e011      	b.n	800060a <fm_adc_read+0x52>
	}else if(uAdcSelected == ADC_CHANNEL_02) {
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d10d      	bne.n	8000608 <fm_adc_read+0x50>
		HAL_ADC_Start_IT(&hadc2);
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <fm_adc_read+0x64>)
 80005ee:	f000 ff61 	bl	80014b4 <HAL_ADC_Start_IT>
		TIM1->CCR1 = (ADC.uValue[ADC_CHANNEL_02]<<4);
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <fm_adc_read+0x60>)
 80005f4:	889b      	ldrh	r3, [r3, #4]
 80005f6:	011a      	lsls	r2, r3, #4
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <fm_adc_read+0x68>)
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 fe5d 	bl	80012bc <HAL_Delay>
		return ADC.uValue[ADC_CHANNEL_02];
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <fm_adc_read+0x60>)
 8000604:	889b      	ldrh	r3, [r3, #4]
 8000606:	e000      	b.n	800060a <fm_adc_read+0x52>
	}
	return 0;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000b4 	.word	0x200000b4
 8000618:	20000000 	.word	0x20000000
 800061c:	200000e4 	.word	0x200000e4
 8000620:	40012c00 	.word	0x40012c00

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fde5 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f861 	bl	80006f4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_I2C1_Init();
 8000632:	f000 f8b9 	bl	80007a8 <MX_I2C1_Init>

  //SSD1306_Init();  // initialise
  fm_api_oled_init();
 8000636:	f7ff fdad 	bl	8000194 <fm_api_oled_init>
  fm_api_adc_init();
 800063a:	f7ff fd87 	bl	800014c <fm_api_adc_init>

  /// lets print some string
  fm_api_oled_update_screen();
 800063e:	f7ff fe1f 	bl	8000280 <fm_api_oled_update_screen>
  char buffer[20];
  sprintf(buffer, "HELLO");
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4928      	ldr	r1, [pc, #160]	; (80006e8 <main+0xc4>)
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fd53 	bl	80040f4 <siprintf>
  fm_api_oled_write(buffer, 20, 0, 0, FONT_11_X_18_PIXELS );
 800064e:	f107 0014 	add.w	r0, r7, #20
 8000652:	2301      	movs	r3, #1
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	2200      	movs	r2, #0
 800065a:	2114      	movs	r1, #20
 800065c:	f7ff fda0 	bl	80001a0 <fm_api_oled_write>
  sprintf(buffer, "  WORLD :)");
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4921      	ldr	r1, [pc, #132]	; (80006ec <main+0xc8>)
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fd44 	bl	80040f4 <siprintf>
  fm_api_oled_write(buffer, 20, 10, 30, FONT_11_X_18_PIXELS );
 800066c:	f107 0014 	add.w	r0, r7, #20
 8000670:	2301      	movs	r3, #1
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	231e      	movs	r3, #30
 8000676:	220a      	movs	r2, #10
 8000678:	2114      	movs	r1, #20
 800067a:	f7ff fd91 	bl	80001a0 <fm_api_oled_write>
  fm_api_oled_update_screen();
 800067e:	f7ff fdff 	bl	8000280 <fm_api_oled_update_screen>
  HAL_Delay(1000);
 8000682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000686:	f000 fe19 	bl	80012bc <HAL_Delay>
  fm_api_oled_clear();
 800068a:	f7ff fdf3 	bl	8000274 <fm_api_oled_clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  char buffer[20];
	  sprintf(buffer, "%d", fm_api_adc_get_value(ADC_CH1));
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff fd6c 	bl	800016c <fm_api_adc_get_value>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	463b      	mov	r3, r7
 800069a:	4915      	ldr	r1, [pc, #84]	; (80006f0 <main+0xcc>)
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fd29 	bl	80040f4 <siprintf>
	  fm_api_oled_write(buffer, 20, 0, 0, FONT_11_X_18_PIXELS );
 80006a2:	4638      	mov	r0, r7
 80006a4:	2301      	movs	r3, #1
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	2200      	movs	r2, #0
 80006ac:	2114      	movs	r1, #20
 80006ae:	f7ff fd77 	bl	80001a0 <fm_api_oled_write>
	  sprintf(buffer, "%d", fm_api_adc_get_value(ADC_CH2));
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff fd5a 	bl	800016c <fm_api_adc_get_value>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	463b      	mov	r3, r7
 80006be:	490c      	ldr	r1, [pc, #48]	; (80006f0 <main+0xcc>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fd17 	bl	80040f4 <siprintf>
	  fm_api_oled_write(buffer, 20, 0, 30, FONT_11_X_18_PIXELS );
 80006c6:	4638      	mov	r0, r7
 80006c8:	2301      	movs	r3, #1
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	231e      	movs	r3, #30
 80006ce:	2200      	movs	r2, #0
 80006d0:	2114      	movs	r1, #20
 80006d2:	f7ff fd65 	bl	80001a0 <fm_api_oled_write>
	  fm_api_oled_update_screen();
 80006d6:	f7ff fdd3 	bl	8000280 <fm_api_oled_update_screen>
	  HAL_Delay(2000);
 80006da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006de:	f000 fded 	bl	80012bc <HAL_Delay>
	  fm_api_oled_clear();
 80006e2:	f7ff fdc7 	bl	8000274 <fm_api_oled_clear>
  {
 80006e6:	e7d2      	b.n	800068e <main+0x6a>
 80006e8:	080049e4 	.word	0x080049e4
 80006ec:	080049ec 	.word	0x080049ec
 80006f0:	080049f8 	.word	0x080049f8

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006fe:	2228      	movs	r2, #40	; 0x28
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fcee 	bl	80040e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000740:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fa94 	bl	8002c78 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000756:	f000 f855 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fd00 	bl	800317c <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000782:	f000 f83f 	bl	8000804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000786:	2302      	movs	r3, #2
 8000788:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fe8b 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800079c:	f000 f832 	bl	8000804 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	; 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f001 fccf 	bl	8002188 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f808 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200001a4 	.word	0x200001a4
 80007fc:	40005400 	.word	0x40005400
 8000800:	00061a80 	.word	0x00061a80

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000816:	f000 fa27 	bl	8000c68 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800081a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800081e:	2201      	movs	r2, #1
 8000820:	2178      	movs	r1, #120	; 0x78
 8000822:	485b      	ldr	r0, [pc, #364]	; (8000990 <SSD1306_Init+0x180>)
 8000824:	f001 fef2 	bl	800260c <HAL_I2C_IsDeviceReady>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800082e:	2300      	movs	r3, #0
 8000830:	e0a9      	b.n	8000986 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000832:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000836:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000838:	e002      	b.n	8000840 <SSD1306_Init+0x30>
		p--;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3b01      	subs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f9      	bne.n	800083a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000846:	22ae      	movs	r2, #174	; 0xae
 8000848:	2100      	movs	r1, #0
 800084a:	2078      	movs	r0, #120	; 0x78
 800084c:	f000 fa86 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000850:	2220      	movs	r2, #32
 8000852:	2100      	movs	r1, #0
 8000854:	2078      	movs	r0, #120	; 0x78
 8000856:	f000 fa81 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800085a:	2210      	movs	r2, #16
 800085c:	2100      	movs	r1, #0
 800085e:	2078      	movs	r0, #120	; 0x78
 8000860:	f000 fa7c 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000864:	22b0      	movs	r2, #176	; 0xb0
 8000866:	2100      	movs	r1, #0
 8000868:	2078      	movs	r0, #120	; 0x78
 800086a:	f000 fa77 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800086e:	22c8      	movs	r2, #200	; 0xc8
 8000870:	2100      	movs	r1, #0
 8000872:	2078      	movs	r0, #120	; 0x78
 8000874:	f000 fa72 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	2078      	movs	r0, #120	; 0x78
 800087e:	f000 fa6d 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000882:	2210      	movs	r2, #16
 8000884:	2100      	movs	r1, #0
 8000886:	2078      	movs	r0, #120	; 0x78
 8000888:	f000 fa68 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	2100      	movs	r1, #0
 8000890:	2078      	movs	r0, #120	; 0x78
 8000892:	f000 fa63 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000896:	2281      	movs	r2, #129	; 0x81
 8000898:	2100      	movs	r1, #0
 800089a:	2078      	movs	r0, #120	; 0x78
 800089c:	f000 fa5e 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80008a0:	22ff      	movs	r2, #255	; 0xff
 80008a2:	2100      	movs	r1, #0
 80008a4:	2078      	movs	r0, #120	; 0x78
 80008a6:	f000 fa59 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80008aa:	22a1      	movs	r2, #161	; 0xa1
 80008ac:	2100      	movs	r1, #0
 80008ae:	2078      	movs	r0, #120	; 0x78
 80008b0:	f000 fa54 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80008b4:	22a6      	movs	r2, #166	; 0xa6
 80008b6:	2100      	movs	r1, #0
 80008b8:	2078      	movs	r0, #120	; 0x78
 80008ba:	f000 fa4f 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80008be:	22a8      	movs	r2, #168	; 0xa8
 80008c0:	2100      	movs	r1, #0
 80008c2:	2078      	movs	r0, #120	; 0x78
 80008c4:	f000 fa4a 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80008c8:	223f      	movs	r2, #63	; 0x3f
 80008ca:	2100      	movs	r1, #0
 80008cc:	2078      	movs	r0, #120	; 0x78
 80008ce:	f000 fa45 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008d2:	22a4      	movs	r2, #164	; 0xa4
 80008d4:	2100      	movs	r1, #0
 80008d6:	2078      	movs	r0, #120	; 0x78
 80008d8:	f000 fa40 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80008dc:	22d3      	movs	r2, #211	; 0xd3
 80008de:	2100      	movs	r1, #0
 80008e0:	2078      	movs	r0, #120	; 0x78
 80008e2:	f000 fa3b 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2078      	movs	r0, #120	; 0x78
 80008ec:	f000 fa36 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80008f0:	22d5      	movs	r2, #213	; 0xd5
 80008f2:	2100      	movs	r1, #0
 80008f4:	2078      	movs	r0, #120	; 0x78
 80008f6:	f000 fa31 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80008fa:	22f0      	movs	r2, #240	; 0xf0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2078      	movs	r0, #120	; 0x78
 8000900:	f000 fa2c 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000904:	22d9      	movs	r2, #217	; 0xd9
 8000906:	2100      	movs	r1, #0
 8000908:	2078      	movs	r0, #120	; 0x78
 800090a:	f000 fa27 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800090e:	2222      	movs	r2, #34	; 0x22
 8000910:	2100      	movs	r1, #0
 8000912:	2078      	movs	r0, #120	; 0x78
 8000914:	f000 fa22 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000918:	22da      	movs	r2, #218	; 0xda
 800091a:	2100      	movs	r1, #0
 800091c:	2078      	movs	r0, #120	; 0x78
 800091e:	f000 fa1d 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000922:	2212      	movs	r2, #18
 8000924:	2100      	movs	r1, #0
 8000926:	2078      	movs	r0, #120	; 0x78
 8000928:	f000 fa18 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800092c:	22db      	movs	r2, #219	; 0xdb
 800092e:	2100      	movs	r1, #0
 8000930:	2078      	movs	r0, #120	; 0x78
 8000932:	f000 fa13 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000936:	2220      	movs	r2, #32
 8000938:	2100      	movs	r1, #0
 800093a:	2078      	movs	r0, #120	; 0x78
 800093c:	f000 fa0e 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000940:	228d      	movs	r2, #141	; 0x8d
 8000942:	2100      	movs	r1, #0
 8000944:	2078      	movs	r0, #120	; 0x78
 8000946:	f000 fa09 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800094a:	2214      	movs	r2, #20
 800094c:	2100      	movs	r1, #0
 800094e:	2078      	movs	r0, #120	; 0x78
 8000950:	f000 fa04 	bl	8000d5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000954:	22af      	movs	r2, #175	; 0xaf
 8000956:	2100      	movs	r1, #0
 8000958:	2078      	movs	r0, #120	; 0x78
 800095a:	f000 f9ff 	bl	8000d5c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800095e:	222e      	movs	r2, #46	; 0x2e
 8000960:	2100      	movs	r1, #0
 8000962:	2078      	movs	r0, #120	; 0x78
 8000964:	f000 f9fa 	bl	8000d5c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000968:	2000      	movs	r0, #0
 800096a:	f000 f843 	bl	80009f4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800096e:	f000 f813 	bl	8000998 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <SSD1306_Init+0x184>)
 8000974:	2200      	movs	r2, #0
 8000976:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SSD1306_Init+0x184>)
 800097a:	2200      	movs	r2, #0
 800097c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SSD1306_Init+0x184>)
 8000980:	2201      	movs	r2, #1
 8000982:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001a4 	.word	0x200001a4
 8000994:	200005f8 	.word	0x200005f8

08000998 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e01d      	b.n	80009e0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	3b50      	subs	r3, #80	; 0x50
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	2078      	movs	r0, #120	; 0x78
 80009b0:	f000 f9d4 	bl	8000d5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f000 f9cf 	bl	8000d5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80009be:	2210      	movs	r2, #16
 80009c0:	2100      	movs	r1, #0
 80009c2:	2078      	movs	r0, #120	; 0x78
 80009c4:	f000 f9ca 	bl	8000d5c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	01db      	lsls	r3, r3, #7
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <SSD1306_UpdateScreen+0x58>)
 80009ce:	441a      	add	r2, r3
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	2078      	movs	r0, #120	; 0x78
 80009d6:	f000 f95b 	bl	8000c90 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	3301      	adds	r3, #1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b07      	cmp	r3, #7
 80009e4:	d9de      	bls.n	80009a4 <SSD1306_UpdateScreen+0xc>
	}
}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001f8 	.word	0x200001f8

080009f4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d101      	bne.n	8000a08 <SSD1306_Fill+0x14>
 8000a04:	2300      	movs	r3, #0
 8000a06:	e000      	b.n	8000a0a <SSD1306_Fill+0x16>
 8000a08:	23ff      	movs	r3, #255	; 0xff
 8000a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <SSD1306_Fill+0x2c>)
 8000a12:	f003 fb67 	bl	80040e4 <memset>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001f8 	.word	0x200001f8

08000a24 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	80bb      	strh	r3, [r7, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	70fb      	strb	r3, [r7, #3]
	if (
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3a:	d848      	bhi.n	8000ace <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000a3c:	88bb      	ldrh	r3, [r7, #4]
 8000a3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a40:	d845      	bhi.n	8000ace <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000a42:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <SSD1306_DrawPixel+0xb4>)
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d11a      	bne.n	8000a94 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a5e:	88fa      	ldrh	r2, [r7, #6]
 8000a60:	88bb      	ldrh	r3, [r7, #4]
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	b298      	uxth	r0, r3
 8000a66:	4603      	mov	r3, r0
 8000a68:	01db      	lsls	r3, r3, #7
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <SSD1306_DrawPixel+0xb8>)
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	b25a      	sxtb	r2, r3
 8000a72:	88bb      	ldrh	r3, [r7, #4]
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	2101      	movs	r1, #1
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b259      	sxtb	r1, r3
 8000a84:	88fa      	ldrh	r2, [r7, #6]
 8000a86:	4603      	mov	r3, r0
 8000a88:	01db      	lsls	r3, r3, #7
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b2c9      	uxtb	r1, r1
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <SSD1306_DrawPixel+0xb8>)
 8000a90:	54d1      	strb	r1, [r2, r3]
 8000a92:	e01d      	b.n	8000ad0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a94:	88fa      	ldrh	r2, [r7, #6]
 8000a96:	88bb      	ldrh	r3, [r7, #4]
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	b298      	uxth	r0, r3
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	01db      	lsls	r3, r3, #7
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <SSD1306_DrawPixel+0xb8>)
 8000aa4:	5cd3      	ldrb	r3, [r2, r3]
 8000aa6:	b25a      	sxtb	r2, r3
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	2101      	movs	r1, #1
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	4013      	ands	r3, r2
 8000abc:	b259      	sxtb	r1, r3
 8000abe:	88fa      	ldrh	r2, [r7, #6]
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	01db      	lsls	r3, r3, #7
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b2c9      	uxtb	r1, r1
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <SSD1306_DrawPixel+0xb8>)
 8000aca:	54d1      	strb	r1, [r2, r3]
 8000acc:	e000      	b.n	8000ad0 <SSD1306_DrawPixel+0xac>
		return;
 8000ace:	bf00      	nop
	}
}
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	200005f8 	.word	0x200005f8
 8000adc:	200001f8 	.word	0x200001f8

08000ae0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	460a      	mov	r2, r1
 8000aea:	80fb      	strh	r3, [r7, #6]
 8000aec:	4613      	mov	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000af0:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <SSD1306_GotoXY+0x28>)
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <SSD1306_GotoXY+0x28>)
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	8053      	strh	r3, [r2, #2]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200005f8 	.word	0x200005f8

08000b0c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <SSD1306_Putc+0xfc>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
	if (
 8000b28:	2b7f      	cmp	r3, #127	; 0x7f
 8000b2a:	dc07      	bgt.n	8000b3c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <SSD1306_Putc+0xfc>)
 8000b2e:	885b      	ldrh	r3, [r3, #2]
 8000b30:	461a      	mov	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b38:	2b3f      	cmp	r3, #63	; 0x3f
 8000b3a:	dd01      	ble.n	8000b40 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e05e      	b.n	8000bfe <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e04b      	b.n	8000bde <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	3b20      	subs	r3, #32
 8000b4e:	6839      	ldr	r1, [r7, #0]
 8000b50:	7849      	ldrb	r1, [r1, #1]
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	4619      	mov	r1, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	e030      	b.n	8000bcc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d010      	beq.n	8000b9c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <SSD1306_Putc+0xfc>)
 8000b7c:	881a      	ldrh	r2, [r3, #0]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	b298      	uxth	r0, r3
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <SSD1306_Putc+0xfc>)
 8000b88:	885a      	ldrh	r2, [r3, #2]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	4413      	add	r3, r2
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	79ba      	ldrb	r2, [r7, #6]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f7ff ff45 	bl	8000a24 <SSD1306_DrawPixel>
 8000b9a:	e014      	b.n	8000bc6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <SSD1306_Putc+0xfc>)
 8000b9e:	881a      	ldrh	r2, [r3, #0]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b298      	uxth	r0, r3
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <SSD1306_Putc+0xfc>)
 8000baa:	885a      	ldrh	r2, [r3, #2]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b299      	uxth	r1, r3
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf0c      	ite	eq
 8000bba:	2301      	moveq	r3, #1
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	f7ff ff2f 	bl	8000a24 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d3c8      	bcc.n	8000b6a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	785b      	ldrb	r3, [r3, #1]
 8000be2:	461a      	mov	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d3ad      	bcc.n	8000b46 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <SSD1306_Putc+0xfc>)
 8000bec:	881a      	ldrh	r2, [r3, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <SSD1306_Putc+0xfc>)
 8000bfa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200005f8 	.word	0x200005f8

08000c0c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	4613      	mov	r3, r2
 8000c18:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000c1a:	e012      	b.n	8000c42 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff71 	bl	8000b0c <SSD1306_Putc>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d002      	beq.n	8000c3c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	e008      	b.n	8000c4e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1e8      	bne.n	8000c1c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff feca 	bl	80009f4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000c60:	f7ff fe9a 	bl	8000998 <SSD1306_UpdateScreen>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <ssd1306_I2C_Init+0x24>)
 8000c70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c72:	e002      	b.n	8000c7a <ssd1306_I2C_Init+0x12>
		p--;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f9      	bne.n	8000c74 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	0003d090 	.word	0x0003d090

08000c90 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b0c7      	sub	sp, #284	; 0x11c
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4604      	mov	r4, r0
 8000c98:	4608      	mov	r0, r1
 8000c9a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000c9e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000ca2:	600a      	str	r2, [r1, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000caa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000cae:	4622      	mov	r2, r4
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cb6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000cba:	4602      	mov	r2, r0
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000cca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cd2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cd6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ce4:	e015      	b.n	8000d12 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000ce6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cee:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	441a      	add	r2, r3
 8000cf6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	7811      	ldrb	r1, [r2, #0]
 8000cfe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d02:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000d06:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000d08:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d12:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d1c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d20:	8812      	ldrh	r2, [r2, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d8df      	bhi.n	8000ce6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000d26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d2a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b299      	uxth	r1, r3
 8000d32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	f107 020c 	add.w	r2, r7, #12
 8000d44:	200a      	movs	r0, #10
 8000d46:	9000      	str	r0, [sp, #0]
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d4a:	f001 fb61 	bl	8002410 <HAL_I2C_Master_Transmit>
}
 8000d4e:	bf00      	nop
 8000d50:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	200001a4 	.word	0x200001a4

08000d5c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	460b      	mov	r3, r1
 8000d68:	71bb      	strb	r3, [r7, #6]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d72:	797b      	ldrb	r3, [r7, #5]
 8000d74:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	f107 020c 	add.w	r2, r7, #12
 8000d7e:	230a      	movs	r3, #10
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2302      	movs	r3, #2
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <ssd1306_I2C_Write+0x38>)
 8000d86:	f001 fb43 	bl	8002410 <HAL_I2C_Master_Transmit>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001a4 	.word	0x200001a4

08000d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_MspInit+0x5c>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <HAL_MspInit+0x5c>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x5c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_MspInit+0x60>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_MspInit+0x60>)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000

08000dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a30      	ldr	r2, [pc, #192]	; (8000ed8 <HAL_ADC_MspInit+0xdc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d12a      	bne.n	8000e72 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a2e      	ldr	r2, [pc, #184]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e50:	2303      	movs	r3, #3
 8000e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <HAL_ADC_MspInit+0xe4>)
 8000e5c:	f001 f810 	bl	8001e80 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2012      	movs	r0, #18
 8000e66:	f000 ffd4 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e6a:	2012      	movs	r0, #18
 8000e6c:	f000 ffed 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e70:	e02e      	b.n	8000ed0 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <HAL_ADC_MspInit+0xe8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d129      	bne.n	8000ed0 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a16      	ldr	r2, [pc, #88]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_ADC_MspInit+0xe0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000eac:	2360      	movs	r3, #96	; 0x60
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <HAL_ADC_MspInit+0xe4>)
 8000ebc:	f000 ffe0 	bl	8001e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2012      	movs	r0, #18
 8000ec6:	f000 ffa4 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000eca:	2012      	movs	r0, #18
 8000ecc:	f000 ffbd 	bl	8001e4a <HAL_NVIC_EnableIRQ>
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40012400 	.word	0x40012400
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40012800 	.word	0x40012800

08000ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <HAL_I2C_MspInit+0x70>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d123      	bne.n	8000f50 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_I2C_MspInit+0x74>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <HAL_I2C_MspInit+0x74>)
 8000f0e:	f043 0308 	orr.w	r3, r3, #8
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_I2C_MspInit+0x74>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f20:	23c0      	movs	r3, #192	; 0xc0
 8000f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f24:	2312      	movs	r3, #18
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	480b      	ldr	r0, [pc, #44]	; (8000f60 <HAL_I2C_MspInit+0x78>)
 8000f34:	f000 ffa4 	bl	8001e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_I2C_MspInit+0x74>)
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_I2C_MspInit+0x74>)
 8000f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f42:	61d3      	str	r3, [r2, #28]
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_I2C_MspInit+0x74>)
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010c00 	.word	0x40010c00

08000f64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <HAL_TIM_PWM_MspInit+0x58>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10c      	bne.n	8000f90 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f8e:	e010      	b.n	8000fb2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f98:	d10b      	bne.n	8000fb2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40012c00 	.word	0x40012c00
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	; (800105c <HAL_TIM_MspPostInit+0x98>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d119      	bne.n	8001018 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <HAL_TIM_MspPostInit+0x9c>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_TIM_MspPostInit+0x9c>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_TIM_MspPostInit+0x9c>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2302      	movs	r3, #2
 8001008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	4814      	ldr	r0, [pc, #80]	; (8001064 <HAL_TIM_MspPostInit+0xa0>)
 8001012:	f000 ff35 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001016:	e01c      	b.n	8001052 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001020:	d117      	bne.n	8001052 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_TIM_MspPostInit+0x9c>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_TIM_MspPostInit+0x9c>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_TIM_MspPostInit+0x9c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103a:	2301      	movs	r3, #1
 800103c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2302      	movs	r3, #2
 8001044:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_TIM_MspPostInit+0xa0>)
 800104e:	f000 ff17 	bl	8001e80 <HAL_GPIO_Init>
}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40012c00 	.word	0x40012c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40010800 	.word	0x40010800

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <HardFault_Handler+0x4>

0800107a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <MemManage_Handler+0x4>

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <BusFault_Handler+0x4>

08001086 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <UsageFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f8e6 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <ADC1_2_IRQHandler+0x14>)
 80010c2:	f000 fab9 	bl	8001638 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <ADC1_2_IRQHandler+0x18>)
 80010c8:	f000 fab6 	bl	8001638 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000b4 	.word	0x200000b4
 80010d4:	200000e4 	.word	0x200000e4

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f002 ffb4 	bl	8004074 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20005000 	.word	0x20005000
 8001138:	00000400 	.word	0x00000400
 800113c:	20000600 	.word	0x20000600
 8001140:	20000618 	.word	0x20000618

08001144 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <SystemInit+0x5c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <SystemInit+0x5c>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <SystemInit+0x5c>)
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4911      	ldr	r1, [pc, #68]	; (80011a0 <SystemInit+0x5c>)
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <SystemInit+0x60>)
 800115c:	4013      	ands	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <SystemInit+0x5c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <SystemInit+0x5c>)
 8001166:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800116a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <SystemInit+0x5c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SystemInit+0x5c>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <SystemInit+0x5c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <SystemInit+0x5c>)
 8001182:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001186:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SystemInit+0x5c>)
 800118a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800118e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SystemInit+0x64>)
 8001192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001196:	609a      	str	r2, [r3, #8]
#endif 
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000
 80011a4:	f8ff0000 	.word	0xf8ff0000
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	; (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011d2:	f7ff ffb7 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f002 ff53 	bl	8004080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011da:	f7ff fa23 	bl	8000624 <main>
  bx lr
 80011de:	4770      	bx	lr
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80011e8:	08007284 	.word	0x08007284
  ldr r2, =_sbss
 80011ec:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80011f0:	20000618 	.word	0x20000618

080011f4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <CAN1_RX1_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 fdf7 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fdc0 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fe0f 	bl	8001e66 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 fdd7 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000028 	.word	0x20000028
 800127c:	20000030 	.word	0x20000030
 8001280:	2000002c 	.word	0x2000002c

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_IncTick+0x20>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	20000030 	.word	0x20000030
 80012a4:	20000604 	.word	0x20000604

080012a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	20000604 	.word	0x20000604

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fff0 	bl	80012a8 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffe0 	bl	80012a8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000030 	.word	0x20000030

08001304 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e0be      	b.n	80014a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fd5a 	bl	8000dfc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fb93 	bl	8001a74 <ADC_ConversionStop_Disable>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 8099 	bne.w	8001492 <HAL_ADC_Init+0x18e>
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f040 8095 	bne.w	8001492 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001370:	f023 0302 	bic.w	r3, r3, #2
 8001374:	f043 0202 	orr.w	r2, r3, #2
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001384:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7b1b      	ldrb	r3, [r3, #12]
 800138a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800138c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4313      	orrs	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800139c:	d003      	beq.n	80013a6 <HAL_ADC_Init+0xa2>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d102      	bne.n	80013ac <HAL_ADC_Init+0xa8>
 80013a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013aa:	e000      	b.n	80013ae <HAL_ADC_Init+0xaa>
 80013ac:	2300      	movs	r3, #0
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7d1b      	ldrb	r3, [r3, #20]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d119      	bne.n	80013f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7b1b      	ldrb	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	035a      	lsls	r2, r3, #13
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	e00b      	b.n	80013f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	f043 0220 	orr.w	r2, r3, #32
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <HAL_ADC_Init+0x1a8>)
 800140c:	4013      	ands	r3, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	430b      	orrs	r3, r1
 8001416:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001420:	d003      	beq.n	800142a <HAL_ADC_Init+0x126>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d104      	bne.n	8001434 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	3b01      	subs	r3, #1
 8001430:	051b      	lsls	r3, r3, #20
 8001432:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	430a      	orrs	r2, r1
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_ADC_Init+0x1ac>)
 8001450:	4013      	ands	r3, r2
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	429a      	cmp	r2, r3
 8001456:	d10b      	bne.n	8001470 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	f023 0303 	bic.w	r3, r3, #3
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800146e:	e018      	b.n	80014a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	f023 0312 	bic.w	r3, r3, #18
 8001478:	f043 0210 	orr.w	r2, r3, #16
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001490:	e007      	b.n	80014a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	f043 0210 	orr.w	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	ffe1f7fd 	.word	0xffe1f7fd
 80014b0:	ff1f0efe 	.word	0xff1f0efe

080014b4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_ADC_Start_IT+0x1a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e0a0      	b.n	8001610 <HAL_ADC_Start_IT+0x15c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fa72 	bl	80019c0 <ADC_Enable>
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 808f 	bne.w	8001606 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a45      	ldr	r2, [pc, #276]	; (8001618 <HAL_ADC_Start_IT+0x164>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d105      	bne.n	8001512 <HAL_ADC_Start_IT+0x5e>
 8001506:	4b45      	ldr	r3, [pc, #276]	; (800161c <HAL_ADC_Start_IT+0x168>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d115      	bne.n	800153e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d026      	beq.n	800157a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001534:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800153c:	e01d      	b.n	800157a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a33      	ldr	r2, [pc, #204]	; (800161c <HAL_ADC_Start_IT+0x168>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d004      	beq.n	800155e <HAL_ADC_Start_IT+0xaa>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <HAL_ADC_Start_IT+0x164>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10d      	bne.n	800157a <HAL_ADC_Start_IT+0xc6>
 800155e:	4b2f      	ldr	r3, [pc, #188]	; (800161c <HAL_ADC_Start_IT+0x168>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	f023 0206 	bic.w	r2, r3, #6
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
 8001592:	e002      	b.n	800159a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f06f 0202 	mvn.w	r2, #2
 80015aa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ca:	d113      	bne.n	80015f4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_ADC_Start_IT+0x164>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d105      	bne.n	80015e2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_ADC_Start_IT+0x168>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d108      	bne.n	80015f4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	e00c      	b.n	800160e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	e003      	b.n	800160e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40012800 	.word	0x40012800
 800161c:	40012400 	.word	0x40012400

08001620 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	2b20      	cmp	r3, #32
 800164c:	d140      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b02      	cmp	r3, #2
 800165a:	d139      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800167e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001682:	d11d      	bne.n	80016c0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001688:	2b00      	cmp	r3, #0
 800168a:	d119      	bne.n	80016c0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0220 	bic.w	r2, r2, #32
 800169a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7fe ff31 	bl	8000528 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f06f 0212 	mvn.w	r2, #18
 80016ce:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016da:	2b80      	cmp	r3, #128	; 0x80
 80016dc:	d14f      	bne.n	800177e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d148      	bne.n	800177e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800170e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001712:	d012      	beq.n	800173a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800171e:	2b00      	cmp	r3, #0
 8001720:	d125      	bne.n	800176e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800172c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001730:	d11d      	bne.n	800176e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001736:	2b00      	cmp	r3, #0
 8001738:	d119      	bne.n	800176e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001748:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fa6e 	bl	8001c50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f06f 020c 	mvn.w	r2, #12
 800177c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001788:	2b40      	cmp	r3, #64	; 0x40
 800178a:	d114      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b01      	cmp	r3, #1
 8001798:	d10d      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f809 	bl	80017be <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0201 	mvn.w	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x20>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e0dc      	b.n	80019aa <HAL_ADC_ConfigChannel+0x1da>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b06      	cmp	r3, #6
 80017fe:	d81c      	bhi.n	800183a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	3b05      	subs	r3, #5
 8001812:	221f      	movs	r2, #31
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	3b05      	subs	r3, #5
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
 8001838:	e03c      	b.n	80018b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d81c      	bhi.n	800187c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	3b23      	subs	r3, #35	; 0x23
 8001854:	221f      	movs	r2, #31
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	4019      	ands	r1, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b23      	subs	r3, #35	; 0x23
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
 800187a:	e01b      	b.n	80018b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b41      	subs	r3, #65	; 0x41
 800188e:	221f      	movs	r2, #31
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b41      	subs	r3, #65	; 0x41
 80018a8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	d91c      	bls.n	80018f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68d9      	ldr	r1, [r3, #12]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	3b1e      	subs	r3, #30
 80018ce:	2207      	movs	r2, #7
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4019      	ands	r1, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6898      	ldr	r0, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	3b1e      	subs	r3, #30
 80018e8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	e019      	b.n	800192a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6919      	ldr	r1, [r3, #16]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	2207      	movs	r2, #7
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	4019      	ands	r1, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6898      	ldr	r0, [r3, #8]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	fa00 f203 	lsl.w	r2, r0, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b10      	cmp	r3, #16
 8001930:	d003      	beq.n	800193a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001936:	2b11      	cmp	r3, #17
 8001938:	d132      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d125      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d126      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001960:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b10      	cmp	r3, #16
 8001968:	d11a      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	0c9a      	lsrs	r2, r3, #18
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001980:	e002      	b.n	8001988 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3b01      	subs	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f9      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x1b2>
 800198e:	e007      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40012400 	.word	0x40012400
 80019b8:	20000028 	.word	0x20000028
 80019bc:	431bde83 	.word	0x431bde83

080019c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d040      	beq.n	8001a60 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <ADC_Enable+0xac>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <ADC_Enable+0xb0>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	0c9b      	lsrs	r3, r3, #18
 80019fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019fc:	e002      	b.n	8001a04 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f9      	bne.n	80019fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a0a:	f7ff fc4d 	bl	80012a8 <HAL_GetTick>
 8001a0e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a10:	e01f      	b.n	8001a52 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a12:	f7ff fc49 	bl	80012a8 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d918      	bls.n	8001a52 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d011      	beq.n	8001a52 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	f043 0210 	orr.w	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e007      	b.n	8001a62 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d1d8      	bne.n	8001a12 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000028 	.word	0x20000028
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d12e      	bne.n	8001aec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a9e:	f7ff fc03 	bl	80012a8 <HAL_GetTick>
 8001aa2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aa4:	e01b      	b.n	8001ade <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aa6:	f7ff fbff 	bl	80012a8 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d914      	bls.n	8001ade <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10d      	bne.n	8001ade <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e007      	b.n	8001aee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d0dc      	beq.n	8001aa6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADCEx_Calibration_Start+0x1e>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e095      	b.n	8001c42 <HAL_ADCEx_Calibration_Start+0x14a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffa8 	bl	8001a74 <ADC_ConversionStop_Disable>
 8001b24:	4603      	mov	r3, r0
 8001b26:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 8084 	bne.w	8001c38 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b38:	f023 0302 	bic.w	r3, r3, #2
 8001b3c:	f043 0202 	orr.w	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b44:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_ADCEx_Calibration_Start+0x154>)
 8001b46:	681c      	ldr	r4, [r3, #0]
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f001 fd65 	bl	8003618 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001b54:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001b56:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001b58:	e002      	b.n	8001b60 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f9      	bne.n	8001b5a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ff2a 	bl	80019c0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0208 	orr.w	r2, r2, #8
 8001b7a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b7c:	f7ff fb94 	bl	80012a8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b82:	e01b      	b.n	8001bbc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b84:	f7ff fb90 	bl	80012a8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b0a      	cmp	r3, #10
 8001b90:	d914      	bls.n	8001bbc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00d      	beq.n	8001bbc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f023 0312 	bic.w	r3, r3, #18
 8001ba8:	f043 0210 	orr.w	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e042      	b.n	8001c42 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1dc      	bne.n	8001b84 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0204 	orr.w	r2, r2, #4
 8001bd8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001bda:	f7ff fb65 	bl	80012a8 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001be0:	e01b      	b.n	8001c1a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001be2:	f7ff fb61 	bl	80012a8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b0a      	cmp	r3, #10
 8001bee:	d914      	bls.n	8001c1a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	f023 0312 	bic.w	r3, r3, #18
 8001c06:	f043 0210 	orr.w	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e013      	b.n	8001c42 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1dc      	bne.n	8001be2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f023 0303 	bic.w	r3, r3, #3
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000028 	.word	0x20000028

08001c50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
	...

08001c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4906      	ldr	r1, [pc, #24]	; (8001cfc <__NVIC_EnableIRQ+0x34>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff90 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff2d 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff42 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff90 	bl	8001d54 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5f 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff35 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa2 	bl	8001db8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e92:	e169      	b.n	8002168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e94:	2201      	movs	r2, #1
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8158 	bne.w	8002162 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a9a      	ldr	r2, [pc, #616]	; (8002120 <HAL_GPIO_Init+0x2a0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d05e      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ebc:	4a98      	ldr	r2, [pc, #608]	; (8002120 <HAL_GPIO_Init+0x2a0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d875      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ec2:	4a98      	ldr	r2, [pc, #608]	; (8002124 <HAL_GPIO_Init+0x2a4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d058      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ec8:	4a96      	ldr	r2, [pc, #600]	; (8002124 <HAL_GPIO_Init+0x2a4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d86f      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ece:	4a96      	ldr	r2, [pc, #600]	; (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d052      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ed4:	4a94      	ldr	r2, [pc, #592]	; (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d869      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001eda:	4a94      	ldr	r2, [pc, #592]	; (800212c <HAL_GPIO_Init+0x2ac>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d04c      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ee0:	4a92      	ldr	r2, [pc, #584]	; (800212c <HAL_GPIO_Init+0x2ac>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d863      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ee6:	4a92      	ldr	r2, [pc, #584]	; (8002130 <HAL_GPIO_Init+0x2b0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d046      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001eec:	4a90      	ldr	r2, [pc, #576]	; (8002130 <HAL_GPIO_Init+0x2b0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d85d      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d82a      	bhi.n	8001f4c <HAL_GPIO_Init+0xcc>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d859      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <HAL_GPIO_Init+0x80>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f7b 	.word	0x08001f7b
 8001f04:	08001f55 	.word	0x08001f55
 8001f08:	08001f67 	.word	0x08001f67
 8001f0c:	08001fa9 	.word	0x08001fa9
 8001f10:	08001faf 	.word	0x08001faf
 8001f14:	08001faf 	.word	0x08001faf
 8001f18:	08001faf 	.word	0x08001faf
 8001f1c:	08001faf 	.word	0x08001faf
 8001f20:	08001faf 	.word	0x08001faf
 8001f24:	08001faf 	.word	0x08001faf
 8001f28:	08001faf 	.word	0x08001faf
 8001f2c:	08001faf 	.word	0x08001faf
 8001f30:	08001faf 	.word	0x08001faf
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001faf 	.word	0x08001faf
 8001f3c:	08001faf 	.word	0x08001faf
 8001f40:	08001faf 	.word	0x08001faf
 8001f44:	08001f5d 	.word	0x08001f5d
 8001f48:	08001f71 	.word	0x08001f71
 8001f4c:	4a79      	ldr	r2, [pc, #484]	; (8002134 <HAL_GPIO_Init+0x2b4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f52:	e02c      	b.n	8001fae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e029      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e024      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e01f      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	330c      	adds	r3, #12
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e01a      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f82:	2304      	movs	r3, #4
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e013      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	611a      	str	r2, [r3, #16]
          break;
 8001f9a:	e009      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	615a      	str	r2, [r3, #20]
          break;
 8001fa6:	e003      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          break;
 8001fae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2bff      	cmp	r3, #255	; 0xff
 8001fb4:	d801      	bhi.n	8001fba <HAL_GPIO_Init+0x13a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_Init+0x13e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2bff      	cmp	r3, #255	; 0xff
 8001fc4:	d802      	bhi.n	8001fcc <HAL_GPIO_Init+0x14c>
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x152>
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	3b08      	subs	r3, #8
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	210f      	movs	r1, #15
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	6a39      	ldr	r1, [r7, #32]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	431a      	orrs	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80b1 	beq.w	8002162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_GPIO_Init+0x2bc>)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a40      	ldr	r2, [pc, #256]	; (8002140 <HAL_GPIO_Init+0x2c0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_GPIO_Init+0x1ec>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3f      	ldr	r2, [pc, #252]	; (8002144 <HAL_GPIO_Init+0x2c4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1e8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3e      	ldr	r2, [pc, #248]	; (8002148 <HAL_GPIO_Init+0x2c8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1e4>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3d      	ldr	r2, [pc, #244]	; (800214c <HAL_GPIO_Init+0x2cc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1e0>
 800205c:	2303      	movs	r3, #3
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002060:	2304      	movs	r3, #4
 8002062:	e004      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002064:	2302      	movs	r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 800206c:	2300      	movs	r3, #0
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207e:	492f      	ldr	r1, [pc, #188]	; (800213c <HAL_GPIO_Init+0x2bc>)
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	492c      	ldr	r1, [pc, #176]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4928      	ldr	r1, [pc, #160]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4922      	ldr	r1, [pc, #136]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	491e      	ldr	r1, [pc, #120]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	4918      	ldr	r1, [pc, #96]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4914      	ldr	r1, [pc, #80]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002100:	4013      	ands	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d021      	beq.n	8002154 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	60cb      	str	r3, [r1, #12]
 800211c:	e021      	b.n	8002162 <HAL_GPIO_Init+0x2e2>
 800211e:	bf00      	nop
 8002120:	10320000 	.word	0x10320000
 8002124:	10310000 	.word	0x10310000
 8002128:	10220000 	.word	0x10220000
 800212c:	10210000 	.word	0x10210000
 8002130:	10120000 	.word	0x10120000
 8002134:	10110000 	.word	0x10110000
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	40010800 	.word	0x40010800
 8002144:	40010c00 	.word	0x40010c00
 8002148:	40011000 	.word	0x40011000
 800214c:	40011400 	.word	0x40011400
 8002150:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	43db      	mvns	r3, r3
 800215c:	4909      	ldr	r1, [pc, #36]	; (8002184 <HAL_GPIO_Init+0x304>)
 800215e:	4013      	ands	r3, r2
 8002160:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	3301      	adds	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f ae8e 	bne.w	8001e94 <HAL_GPIO_Init+0x14>
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	372c      	adds	r7, #44	; 0x2c
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e12b      	b.n	80023f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fe9a 	bl	8000ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021ec:	f001 f918 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80021f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4a81      	ldr	r2, [pc, #516]	; (80023fc <HAL_I2C_Init+0x274>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d807      	bhi.n	800220c <HAL_I2C_Init+0x84>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a80      	ldr	r2, [pc, #512]	; (8002400 <HAL_I2C_Init+0x278>)
 8002200:	4293      	cmp	r3, r2
 8002202:	bf94      	ite	ls
 8002204:	2301      	movls	r3, #1
 8002206:	2300      	movhi	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e006      	b.n	800221a <HAL_I2C_Init+0x92>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a7d      	ldr	r2, [pc, #500]	; (8002404 <HAL_I2C_Init+0x27c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0e7      	b.n	80023f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a78      	ldr	r2, [pc, #480]	; (8002408 <HAL_I2C_Init+0x280>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0c9b      	lsrs	r3, r3, #18
 800222c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a6a      	ldr	r2, [pc, #424]	; (80023fc <HAL_I2C_Init+0x274>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d802      	bhi.n	800225c <HAL_I2C_Init+0xd4>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3301      	adds	r3, #1
 800225a:	e009      	b.n	8002270 <HAL_I2C_Init+0xe8>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	4a69      	ldr	r2, [pc, #420]	; (800240c <HAL_I2C_Init+0x284>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	3301      	adds	r3, #1
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002282:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	495c      	ldr	r1, [pc, #368]	; (80023fc <HAL_I2C_Init+0x274>)
 800228c:	428b      	cmp	r3, r1
 800228e:	d819      	bhi.n	80022c4 <HAL_I2C_Init+0x13c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e59      	subs	r1, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fbb1 f3f3 	udiv	r3, r1, r3
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022a4:	400b      	ands	r3, r1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_I2C_Init+0x138>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e59      	subs	r1, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	e051      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 80022c0:	2304      	movs	r3, #4
 80022c2:	e04f      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <HAL_I2C_Init+0x168>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e012      	b.n	8002316 <HAL_I2C_Init+0x18e>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	0099      	lsls	r1, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Init+0x196>
 800231a:	2301      	movs	r3, #1
 800231c:	e022      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10e      	bne.n	8002344 <HAL_I2C_Init+0x1bc>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e58      	subs	r0, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	440b      	add	r3, r1
 8002334:	fbb0 f3f3 	udiv	r3, r0, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002342:	e00f      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	0099      	lsls	r1, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	6809      	ldr	r1, [r1, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6911      	ldr	r1, [r2, #16]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68d2      	ldr	r2, [r2, #12]
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	000186a0 	.word	0x000186a0
 8002400:	001e847f 	.word	0x001e847f
 8002404:	003d08ff 	.word	0x003d08ff
 8002408:	431bde83 	.word	0x431bde83
 800240c:	10624dd3 	.word	0x10624dd3

08002410 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	461a      	mov	r2, r3
 800241c:	460b      	mov	r3, r1
 800241e:	817b      	strh	r3, [r7, #10]
 8002420:	4613      	mov	r3, r2
 8002422:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7fe ff40 	bl	80012a8 <HAL_GetTick>
 8002428:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b20      	cmp	r3, #32
 8002434:	f040 80e0 	bne.w	80025f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2319      	movs	r3, #25
 800243e:	2201      	movs	r2, #1
 8002440:	4970      	ldr	r1, [pc, #448]	; (8002604 <HAL_I2C_Master_Transmit+0x1f4>)
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fa92 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
 8002450:	e0d3      	b.n	80025fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_I2C_Master_Transmit+0x50>
 800245c:	2302      	movs	r3, #2
 800245e:	e0cc      	b.n	80025fa <HAL_I2C_Master_Transmit+0x1ea>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d007      	beq.n	8002486 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002494:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2221      	movs	r2, #33	; 0x21
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2210      	movs	r2, #16
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	893a      	ldrh	r2, [r7, #8]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_I2C_Master_Transmit+0x1f8>)
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024c8:	8979      	ldrh	r1, [r7, #10]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	6a3a      	ldr	r2, [r7, #32]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f9ca 	bl	8002868 <I2C_MasterRequestWrite>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e08d      	b.n	80025fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024f4:	e066      	b.n	80025c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	6a39      	ldr	r1, [r7, #32]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fb0c 	bl	8002b18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00d      	beq.n	8002522 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2b04      	cmp	r3, #4
 800250c:	d107      	bne.n	800251e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e06b      	b.n	80025fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b04      	cmp	r3, #4
 800255e:	d11b      	bne.n	8002598 <HAL_I2C_Master_Transmit+0x188>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d017      	beq.n	8002598 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	6a39      	ldr	r1, [r7, #32]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fafc 	bl	8002b9a <I2C_WaitOnBTFFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d107      	bne.n	80025c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e01a      	b.n	80025fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d194      	bne.n	80024f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	00100002 	.word	0x00100002
 8002608:	ffff0000 	.word	0xffff0000

0800260c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	460b      	mov	r3, r1
 800261a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7fe fe44 	bl	80012a8 <HAL_GetTick>
 8002620:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002622:	2301      	movs	r3, #1
 8002624:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b20      	cmp	r3, #32
 8002630:	f040 8111 	bne.w	8002856 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2319      	movs	r3, #25
 800263a:	2201      	movs	r2, #1
 800263c:	4988      	ldr	r1, [pc, #544]	; (8002860 <HAL_I2C_IsDeviceReady+0x254>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f994 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	e104      	b.n	8002858 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_I2C_IsDeviceReady+0x50>
 8002658:	2302      	movs	r3, #2
 800265a:	e0fd      	b.n	8002858 <HAL_I2C_IsDeviceReady+0x24c>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d007      	beq.n	8002682 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2224      	movs	r2, #36	; 0x24
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a70      	ldr	r2, [pc, #448]	; (8002864 <HAL_I2C_IsDeviceReady+0x258>)
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f952 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026dc:	d103      	bne.n	80026e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e0b6      	b.n	8002858 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fdd5 	bl	80012a8 <HAL_GetTick>
 80026fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b02      	cmp	r3, #2
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800272e:	e025      	b.n	800277c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002730:	f7fe fdba 	bl	80012a8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d302      	bcc.n	8002746 <HAL_I2C_IsDeviceReady+0x13a>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	22a0      	movs	r2, #160	; 0xa0
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b02      	cmp	r3, #2
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2ba0      	cmp	r3, #160	; 0xa0
 8002786:	d005      	beq.n	8002794 <HAL_I2C_IsDeviceReady+0x188>
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <HAL_I2C_IsDeviceReady+0x188>
 800278e:	7dbb      	ldrb	r3, [r7, #22]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0cd      	beq.n	8002730 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d129      	bne.n	80027fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2319      	movs	r3, #25
 80027d6:	2201      	movs	r2, #1
 80027d8:	4921      	ldr	r1, [pc, #132]	; (8002860 <HAL_I2C_IsDeviceReady+0x254>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f8c6 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e036      	b.n	8002858 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e02c      	b.n	8002858 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002816:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2319      	movs	r3, #25
 800281e:	2201      	movs	r2, #1
 8002820:	490f      	ldr	r1, [pc, #60]	; (8002860 <HAL_I2C_IsDeviceReady+0x254>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f8a2 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e012      	b.n	8002858 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	3301      	adds	r3, #1
 8002836:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	f4ff af32 	bcc.w	80026a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	00100002 	.word	0x00100002
 8002864:	ffff0000 	.word	0xffff0000

08002868 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	460b      	mov	r3, r1
 8002876:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d006      	beq.n	8002892 <I2C_MasterRequestWrite+0x2a>
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d003      	beq.n	8002892 <I2C_MasterRequestWrite+0x2a>
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002890:	d108      	bne.n	80028a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e00b      	b.n	80028bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	2b12      	cmp	r3, #18
 80028aa:	d107      	bne.n	80028bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f84f 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00d      	beq.n	80028f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e2:	d103      	bne.n	80028ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e035      	b.n	800295c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028f8:	d108      	bne.n	800290c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002908:	611a      	str	r2, [r3, #16]
 800290a:	e01b      	b.n	8002944 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800290c:	897b      	ldrh	r3, [r7, #10]
 800290e:	11db      	asrs	r3, r3, #7
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0306 	and.w	r3, r3, #6
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f063 030f 	orn	r3, r3, #15
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	490e      	ldr	r1, [pc, #56]	; (8002964 <I2C_MasterRequestWrite+0xfc>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f875 	bl	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e010      	b.n	800295c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <I2C_MasterRequestWrite+0x100>)
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f865 	bl	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	00010008 	.word	0x00010008
 8002968:	00010002 	.word	0x00010002

0800296c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800297c:	e025      	b.n	80029ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d021      	beq.n	80029ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7fe fc8f 	bl	80012a8 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e023      	b.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10d      	bne.n	80029f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	e00c      	b.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4013      	ands	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf0c      	ite	eq
 8002a02:	2301      	moveq	r3, #1
 8002a04:	2300      	movne	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d0b6      	beq.n	800297e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a28:	e051      	b.n	8002ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a38:	d123      	bne.n	8002a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f043 0204 	orr.w	r2, r3, #4
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e046      	b.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d021      	beq.n	8002ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8a:	f7fe fc0d 	bl	80012a8 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d302      	bcc.n	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d116      	bne.n	8002ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e020      	b.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d10c      	bne.n	8002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf14      	ite	ne
 8002aea:	2301      	movne	r3, #1
 8002aec:	2300      	moveq	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	e00b      	b.n	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	43da      	mvns	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d18d      	bne.n	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b24:	e02d      	b.n	8002b82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f878 	bl	8002c1c <I2C_IsAcknowledgeFailed>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e02d      	b.n	8002b92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d021      	beq.n	8002b82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fe fbb3 	bl	80012a8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d116      	bne.n	8002b82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e007      	b.n	8002b92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b80      	cmp	r3, #128	; 0x80
 8002b8e:	d1ca      	bne.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba6:	e02d      	b.n	8002c04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f837 	bl	8002c1c <I2C_IsAcknowledgeFailed>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e02d      	b.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbe:	d021      	beq.n	8002c04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc0:	f7fe fb72 	bl	80012a8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d302      	bcc.n	8002bd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d116      	bne.n	8002c04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e007      	b.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d1ca      	bne.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d11b      	bne.n	8002c6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e272      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8087 	beq.w	8002da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c98:	4b92      	ldr	r3, [pc, #584]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d00c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ca4:	4b8f      	ldr	r3, [pc, #572]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d112      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x5e>
 8002cb0:	4b8c      	ldr	r3, [pc, #560]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbe:	4b89      	ldr	r3, [pc, #548]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d06c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x12c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d168      	bne.n	8002da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e24c      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x76>
 8002ce0:	4b80      	ldr	r3, [pc, #512]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a7f      	ldr	r2, [pc, #508]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	e02e      	b.n	8002d4c <HAL_RCC_OscConfig+0xd4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x98>
 8002cf6:	4b7b      	ldr	r3, [pc, #492]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7a      	ldr	r2, [pc, #488]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b78      	ldr	r3, [pc, #480]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a77      	ldr	r2, [pc, #476]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0xd4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0xbc>
 8002d1a:	4b72      	ldr	r3, [pc, #456]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a71      	ldr	r2, [pc, #452]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6e      	ldr	r2, [pc, #440]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xd4>
 8002d34:	4b6b      	ldr	r3, [pc, #428]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a6a      	ldr	r2, [pc, #424]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a67      	ldr	r2, [pc, #412]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe faa8 	bl	80012a8 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fe faa4 	bl	80012a8 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e200      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0xe4>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fa94 	bl	80012a8 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fa90 	bl	80012a8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1ec      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	4b53      	ldr	r3, [pc, #332]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x10c>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db2:	4b4c      	ldr	r3, [pc, #304]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dbe:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x18c>
 8002dca:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x176>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1c0      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4939      	ldr	r1, [pc, #228]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e03a      	b.n	8002e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fa49 	bl	80012a8 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fa45 	bl	80012a8 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1a1      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4927      	ldr	r1, [pc, #156]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
 8002e4c:	e015      	b.n	8002e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe fa28 	bl	80012a8 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fa24 	bl	80012a8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e180      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d03a      	beq.n	8002efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d019      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e94:	f7fe fa08 	bl	80012a8 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe fa04 	bl	80012a8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e160      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f000 fad8 	bl	8003470 <RCC_Delay>
 8002ec0:	e01c      	b.n	8002efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7fe f9ee 	bl	80012a8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ece:	e00f      	b.n	8002ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe f9ea 	bl	80012a8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d908      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e146      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	42420000 	.word	0x42420000
 8002eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b92      	ldr	r3, [pc, #584]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e9      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a6 	beq.w	8003056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b8b      	ldr	r3, [pc, #556]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10d      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	4b88      	ldr	r3, [pc, #544]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	4a87      	ldr	r2, [pc, #540]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	61d3      	str	r3, [r2, #28]
 8002f26:	4b85      	ldr	r3, [pc, #532]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b82      	ldr	r3, [pc, #520]	; (8003140 <HAL_RCC_OscConfig+0x4c8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4b7f      	ldr	r3, [pc, #508]	; (8003140 <HAL_RCC_OscConfig+0x4c8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7e      	ldr	r2, [pc, #504]	; (8003140 <HAL_RCC_OscConfig+0x4c8>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f9ab 	bl	80012a8 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fe f9a7 	bl	80012a8 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	; 0x64
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e103      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b75      	ldr	r3, [pc, #468]	; (8003140 <HAL_RCC_OscConfig+0x4c8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x312>
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6213      	str	r3, [r2, #32]
 8002f88:	e02d      	b.n	8002fe6 <HAL_RCC_OscConfig+0x36e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x334>
 8002f92:	4b6a      	ldr	r3, [pc, #424]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4a69      	ldr	r2, [pc, #420]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6213      	str	r3, [r2, #32]
 8002f9e:	4b67      	ldr	r3, [pc, #412]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4a66      	ldr	r2, [pc, #408]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	f023 0304 	bic.w	r3, r3, #4
 8002fa8:	6213      	str	r3, [r2, #32]
 8002faa:	e01c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x36e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d10c      	bne.n	8002fce <HAL_RCC_OscConfig+0x356>
 8002fb4:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4a60      	ldr	r2, [pc, #384]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	6213      	str	r3, [r2, #32]
 8002fc0:	4b5e      	ldr	r3, [pc, #376]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a5d      	ldr	r2, [pc, #372]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	e00b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x36e>
 8002fce:	4b5b      	ldr	r3, [pc, #364]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4a5a      	ldr	r2, [pc, #360]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6213      	str	r3, [r2, #32]
 8002fda:	4b58      	ldr	r3, [pc, #352]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4a57      	ldr	r2, [pc, #348]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d015      	beq.n	800301a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7fe f95b 	bl	80012a8 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe f957 	bl	80012a8 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0b1      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	4b4b      	ldr	r3, [pc, #300]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ee      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x37e>
 8003018:	e014      	b.n	8003044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe f945 	bl	80012a8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe f941 	bl	80012a8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e09b      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	4b40      	ldr	r3, [pc, #256]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ee      	bne.n	8003022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b3c      	ldr	r3, [pc, #240]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4a3b      	ldr	r2, [pc, #236]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8087 	beq.w	800316e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d061      	beq.n	8003130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d146      	bne.n	8003102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe f915 	bl	80012a8 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe f911 	bl	80012a8 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e06d      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003094:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a8:	d108      	bne.n	80030bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4921      	ldr	r1, [pc, #132]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030bc:	4b1f      	ldr	r3, [pc, #124]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a19      	ldr	r1, [r3, #32]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	430b      	orrs	r3, r1
 80030ce:	491b      	ldr	r1, [pc, #108]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe f8e5 	bl	80012a8 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe f8e1 	bl	80012a8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e03d      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x46a>
 8003100:	e035      	b.n	800316e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe f8ce 	bl	80012a8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003110:	f7fe f8ca 	bl	80012a8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e026      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCC_OscConfig+0x4c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x498>
 800312e:	e01e      	b.n	800316e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e019      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
 800313c:	40021000 	.word	0x40021000
 8003140:	40007000 	.word	0x40007000
 8003144:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x500>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	429a      	cmp	r2, r3
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000

0800317c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0d0      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b6a      	ldr	r3, [pc, #424]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d910      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 0207 	bic.w	r2, r3, #7
 80031a6:	4965      	ldr	r1, [pc, #404]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b63      	ldr	r3, [pc, #396]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0b8      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d8:	4b59      	ldr	r3, [pc, #356]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a58      	ldr	r2, [pc, #352]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f0:	4b53      	ldr	r3, [pc, #332]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a52      	ldr	r2, [pc, #328]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b50      	ldr	r3, [pc, #320]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	494d      	ldr	r1, [pc, #308]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d040      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b47      	ldr	r3, [pc, #284]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d115      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e07f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b41      	ldr	r3, [pc, #260]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e073      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e06b      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4936      	ldr	r1, [pc, #216]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fe f81c 	bl	80012a8 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe f818 	bl	80012a8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e053      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b27      	ldr	r3, [pc, #156]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d210      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 0207 	bic.w	r2, r3, #7
 80032b2:	4922      	ldr	r1, [pc, #136]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b20      	ldr	r3, [pc, #128]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e032      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4916      	ldr	r1, [pc, #88]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	490e      	ldr	r1, [pc, #56]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800330a:	f000 f821 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 800330e:	4602      	mov	r2, r0
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	490a      	ldr	r1, [pc, #40]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	5ccb      	ldrb	r3, [r1, r3]
 800331e:	fa22 f303 	lsr.w	r3, r2, r3
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_RCC_ClockConfig+0x1cc>)
 8003324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003326:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1d0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd ff7a 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40022000 	.word	0x40022000
 8003340:	40021000 	.word	0x40021000
 8003344:	08007230 	.word	0x08007230
 8003348:	20000028 	.word	0x20000028
 800334c:	2000002c 	.word	0x2000002c

08003350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003350:	b490      	push	{r4, r7}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_GetSysClockFreq+0xac>)
 8003358:	1d3c      	adds	r4, r7, #4
 800335a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800335c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003360:	f240 2301 	movw	r3, #513	; 0x201
 8003364:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <HAL_RCC_GetSysClockFreq+0xb0>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d002      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x40>
 800338a:	2b08      	cmp	r3, #8
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x46>
 800338e:	e02b      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003390:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003392:	623b      	str	r3, [r7, #32]
      break;
 8003394:	e02b      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	0c9b      	lsrs	r3, r3, #18
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	3328      	adds	r3, #40	; 0x28
 80033a0:	443b      	add	r3, r7
 80033a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d012      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	0c5b      	lsrs	r3, r3, #17
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	3328      	adds	r3, #40	; 0x28
 80033be:	443b      	add	r3, r7
 80033c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ca:	fb03 f202 	mul.w	r2, r3, r2
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	e004      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	623b      	str	r3, [r7, #32]
      break;
 80033e6:	e002      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ea:	623b      	str	r3, [r7, #32]
      break;
 80033ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ee:	6a3b      	ldr	r3, [r7, #32]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3728      	adds	r7, #40	; 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc90      	pop	{r4, r7}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	080049fc 	.word	0x080049fc
 8003400:	40021000 	.word	0x40021000
 8003404:	007a1200 	.word	0x007a1200
 8003408:	003d0900 	.word	0x003d0900

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <HAL_RCC_GetHCLKFreq+0x10>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	20000028 	.word	0x20000028

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003424:	f7ff fff2 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	08007240 	.word	0x08007240

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800344c:	f7ff ffde 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0adb      	lsrs	r3, r3, #11
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	; (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000
 800346c:	08007240 	.word	0x08007240

08003470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <RCC_Delay+0x34>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <RCC_Delay+0x38>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0a5b      	lsrs	r3, r3, #9
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800348c:	bf00      	nop
  }
  while (Delay --);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1e5a      	subs	r2, r3, #1
 8003492:	60fa      	str	r2, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f9      	bne.n	800348c <RCC_Delay+0x1c>
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	20000028 	.word	0x20000028
 80034a8:	10624dd3 	.word	0x10624dd3

080034ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d07d      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034c8:	2300      	movs	r3, #0
 80034ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034cc:	4b4f      	ldr	r3, [pc, #316]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d8:	4b4c      	ldr	r3, [pc, #304]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	4a4b      	ldr	r2, [pc, #300]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e2:	61d3      	str	r3, [r2, #28]
 80034e4:	4b49      	ldr	r3, [pc, #292]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f0:	2301      	movs	r3, #1
 80034f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	4b46      	ldr	r3, [pc, #280]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d118      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003500:	4b43      	ldr	r3, [pc, #268]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a42      	ldr	r2, [pc, #264]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350c:	f7fd fecc 	bl	80012a8 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003512:	e008      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003514:	f7fd fec8 	bl	80012a8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e06d      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b3a      	ldr	r3, [pc, #232]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02e      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d027      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003550:	4b2e      	ldr	r3, [pc, #184]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003558:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003560:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003566:	4a29      	ldr	r2, [pc, #164]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d014      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fd fe97 	bl	80012a8 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357c:	e00a      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fd fe93 	bl	80012a8 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	; 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d901      	bls.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e036      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0ee      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4917      	ldr	r1, [pc, #92]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b14      	ldr	r3, [pc, #80]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4a13      	ldr	r2, [pc, #76]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d0:	4b0e      	ldr	r3, [pc, #56]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	490b      	ldr	r1, [pc, #44]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4904      	ldr	r1, [pc, #16]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	40007000 	.word	0x40007000
 8003614:	42420440 	.word	0x42420440

08003618 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b08d      	sub	sp, #52	; 0x34
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003620:	4b58      	ldr	r3, [pc, #352]	; (8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003622:	f107 040c 	add.w	r4, r7, #12
 8003626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800362c:	f240 2301 	movw	r3, #513	; 0x201
 8003630:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	2300      	movs	r3, #0
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	2300      	movs	r3, #0
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b10      	cmp	r3, #16
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b10      	cmp	r3, #16
 8003650:	f200 808e 	bhi.w	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d049      	beq.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d079      	beq.n	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003660:	e086      	b.n	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003662:	4b49      	ldr	r3, [pc, #292]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003668:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d07f      	beq.n	8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	0c9b      	lsrs	r3, r3, #18
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	3330      	adds	r3, #48	; 0x30
 800367e:	443b      	add	r3, r7
 8003680:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003684:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d017      	beq.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003690:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0c5b      	lsrs	r3, r3, #17
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	3330      	adds	r3, #48	; 0x30
 800369c:	443b      	add	r3, r7
 800369e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00d      	beq.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80036ae:	4a37      	ldr	r2, [pc, #220]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036be:	e004      	b.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	4a33      	ldr	r2, [pc, #204]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036c4:	fb02 f303 	mul.w	r3, r2, r3
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d6:	d102      	bne.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036dc:	e04a      	b.n	8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4a2c      	ldr	r2, [pc, #176]	; (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036ec:	e042      	b.n	8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80036ee:	4b26      	ldr	r3, [pc, #152]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fe:	d108      	bne.n	8003712 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003710:	e01f      	b.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371c:	d109      	bne.n	8003732 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800371e:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800372a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003730:	e00f      	b.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800373c:	d11c      	bne.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800374a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003750:	e012      	b.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003752:	e011      	b.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003754:	f7ff fe78 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	0b9b      	lsrs	r3, r3, #14
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	3301      	adds	r3, #1
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800376e:	e004      	b.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003770:	bf00      	nop
 8003772:	e002      	b.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003778:	bf00      	nop
    }
  }
  return (frequency);
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800377c:	4618      	mov	r0, r3
 800377e:	3734      	adds	r7, #52	; 0x34
 8003780:	46bd      	mov	sp, r7
 8003782:	bd90      	pop	{r4, r7, pc}
 8003784:	08004a0c 	.word	0x08004a0c
 8003788:	40021000 	.word	0x40021000
 800378c:	007a1200 	.word	0x007a1200
 8003790:	003d0900 	.word	0x003d0900
 8003794:	aaaaaaab 	.word	0xaaaaaaab

08003798 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e041      	b.n	800382e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fbd0 	bl	8000f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f000 f98e 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <HAL_TIM_PWM_Start+0x24>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e022      	b.n	80038a2 <HAL_TIM_PWM_Start+0x6a>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b04      	cmp	r3, #4
 8003860:	d109      	bne.n	8003876 <HAL_TIM_PWM_Start+0x3e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b01      	cmp	r3, #1
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	e015      	b.n	80038a2 <HAL_TIM_PWM_Start+0x6a>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d109      	bne.n	8003890 <HAL_TIM_PWM_Start+0x58>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e008      	b.n	80038a2 <HAL_TIM_PWM_Start+0x6a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e05e      	b.n	8003968 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <HAL_TIM_PWM_Start+0x82>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b8:	e013      	b.n	80038e2 <HAL_TIM_PWM_Start+0xaa>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d104      	bne.n	80038ca <HAL_TIM_PWM_Start+0x92>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c8:	e00b      	b.n	80038e2 <HAL_TIM_PWM_Start+0xaa>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start+0xa2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d8:	e003      	b.n	80038e2 <HAL_TIM_PWM_Start+0xaa>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2201      	movs	r2, #1
 80038e8:	6839      	ldr	r1, [r7, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 faee 	bl	8003ecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_TIM_PWM_Start+0x138>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d107      	bne.n	800390a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a18      	ldr	r2, [pc, #96]	; (8003970 <HAL_TIM_PWM_Start+0x138>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIM_PWM_Start+0xfa>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d009      	beq.n	8003932 <HAL_TIM_PWM_Start+0xfa>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_TIM_PWM_Start+0x13c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIM_PWM_Start+0xfa>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a12      	ldr	r2, [pc, #72]	; (8003978 <HAL_TIM_PWM_Start+0x140>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d111      	bne.n	8003956 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b06      	cmp	r3, #6
 8003942:	d010      	beq.n	8003966 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003954:	e007      	b.n	8003966 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800

0800397c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003992:	2302      	movs	r3, #2
 8003994:	e0ac      	b.n	8003af0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b0c      	cmp	r3, #12
 80039a2:	f200 809f 	bhi.w	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039e1 	.word	0x080039e1
 80039b0:	08003ae5 	.word	0x08003ae5
 80039b4:	08003ae5 	.word	0x08003ae5
 80039b8:	08003ae5 	.word	0x08003ae5
 80039bc:	08003a21 	.word	0x08003a21
 80039c0:	08003ae5 	.word	0x08003ae5
 80039c4:	08003ae5 	.word	0x08003ae5
 80039c8:	08003ae5 	.word	0x08003ae5
 80039cc:	08003a63 	.word	0x08003a63
 80039d0:	08003ae5 	.word	0x08003ae5
 80039d4:	08003ae5 	.word	0x08003ae5
 80039d8:	08003ae5 	.word	0x08003ae5
 80039dc:	08003aa3 	.word	0x08003aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f8e8 	bl	8003bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0208 	orr.w	r2, r2, #8
 80039fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0204 	bic.w	r2, r2, #4
 8003a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6999      	ldr	r1, [r3, #24]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	619a      	str	r2, [r3, #24]
      break;
 8003a1e:	e062      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f92e 	bl	8003c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6999      	ldr	r1, [r3, #24]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	021a      	lsls	r2, r3, #8
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	619a      	str	r2, [r3, #24]
      break;
 8003a60:	e041      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f977 	bl	8003d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0208 	orr.w	r2, r2, #8
 8003a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0204 	bic.w	r2, r2, #4
 8003a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69d9      	ldr	r1, [r3, #28]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	61da      	str	r2, [r3, #28]
      break;
 8003aa0:	e021      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f9c1 	bl	8003e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69d9      	ldr	r1, [r3, #28]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	021a      	lsls	r2, r3, #8
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	61da      	str	r2, [r3, #28]
      break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ae4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <TIM_Base_SetConfig+0xb8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <TIM_Base_SetConfig+0x30>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d007      	beq.n	8003b28 <TIM_Base_SetConfig+0x30>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a26      	ldr	r2, [pc, #152]	; (8003bb4 <TIM_Base_SetConfig+0xbc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_Base_SetConfig+0x30>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <TIM_Base_SetConfig+0xc0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d108      	bne.n	8003b3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	; (8003bb0 <TIM_Base_SetConfig+0xb8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_Base_SetConfig+0x62>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d007      	beq.n	8003b5a <TIM_Base_SetConfig+0x62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <TIM_Base_SetConfig+0xbc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_Base_SetConfig+0x62>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <TIM_Base_SetConfig+0xc0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <TIM_Base_SetConfig+0xb8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800

08003bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f023 0201 	bic.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f023 0302 	bic.w	r3, r3, #2
 8003c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <TIM_OC1_SetConfig+0xc8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10c      	bne.n	8003c32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0308 	bic.w	r3, r3, #8
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <TIM_OC1_SetConfig+0xc8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d111      	bne.n	8003c5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	621a      	str	r2, [r3, #32]
}
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00

08003c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0210 	bic.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0320 	bic.w	r3, r3, #32
 8003cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <TIM_OC2_SetConfig+0xd0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10d      	bne.n	8003d04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <TIM_OC2_SetConfig+0xd0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d113      	bne.n	8003d34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	621a      	str	r2, [r3, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	40012c00 	.word	0x40012c00

08003d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <TIM_OC3_SetConfig+0xd0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10d      	bne.n	8003dd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <TIM_OC3_SetConfig+0xd0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d113      	bne.n	8003e06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	621a      	str	r2, [r3, #32]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40012c00 	.word	0x40012c00

08003e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <TIM_OC4_SetConfig+0x98>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d109      	bne.n	8003ea4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	40012c00 	.word	0x40012c00

08003ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2201      	movs	r2, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e046      	b.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d009      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800

08003fd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e03d      	b.n	8004068 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
	...

08004074 <__errno>:
 8004074:	4b01      	ldr	r3, [pc, #4]	; (800407c <__errno+0x8>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000034 	.word	0x20000034

08004080 <__libc_init_array>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	2600      	movs	r6, #0
 8004084:	4d0c      	ldr	r5, [pc, #48]	; (80040b8 <__libc_init_array+0x38>)
 8004086:	4c0d      	ldr	r4, [pc, #52]	; (80040bc <__libc_init_array+0x3c>)
 8004088:	1b64      	subs	r4, r4, r5
 800408a:	10a4      	asrs	r4, r4, #2
 800408c:	42a6      	cmp	r6, r4
 800408e:	d109      	bne.n	80040a4 <__libc_init_array+0x24>
 8004090:	f000 fc9c 	bl	80049cc <_init>
 8004094:	2600      	movs	r6, #0
 8004096:	4d0a      	ldr	r5, [pc, #40]	; (80040c0 <__libc_init_array+0x40>)
 8004098:	4c0a      	ldr	r4, [pc, #40]	; (80040c4 <__libc_init_array+0x44>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	42a6      	cmp	r6, r4
 80040a0:	d105      	bne.n	80040ae <__libc_init_array+0x2e>
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a8:	4798      	blx	r3
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7ee      	b.n	800408c <__libc_init_array+0xc>
 80040ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b2:	4798      	blx	r3
 80040b4:	3601      	adds	r6, #1
 80040b6:	e7f2      	b.n	800409e <__libc_init_array+0x1e>
 80040b8:	0800727c 	.word	0x0800727c
 80040bc:	0800727c 	.word	0x0800727c
 80040c0:	0800727c 	.word	0x0800727c
 80040c4:	08007280 	.word	0x08007280

080040c8 <memcpy>:
 80040c8:	440a      	add	r2, r1
 80040ca:	4291      	cmp	r1, r2
 80040cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80040d0:	d100      	bne.n	80040d4 <memcpy+0xc>
 80040d2:	4770      	bx	lr
 80040d4:	b510      	push	{r4, lr}
 80040d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040da:	4291      	cmp	r1, r2
 80040dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040e0:	d1f9      	bne.n	80040d6 <memcpy+0xe>
 80040e2:	bd10      	pop	{r4, pc}

080040e4 <memset>:
 80040e4:	4603      	mov	r3, r0
 80040e6:	4402      	add	r2, r0
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d100      	bne.n	80040ee <memset+0xa>
 80040ec:	4770      	bx	lr
 80040ee:	f803 1b01 	strb.w	r1, [r3], #1
 80040f2:	e7f9      	b.n	80040e8 <memset+0x4>

080040f4 <siprintf>:
 80040f4:	b40e      	push	{r1, r2, r3}
 80040f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040fa:	b500      	push	{lr}
 80040fc:	b09c      	sub	sp, #112	; 0x70
 80040fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004100:	9002      	str	r0, [sp, #8]
 8004102:	9006      	str	r0, [sp, #24]
 8004104:	9107      	str	r1, [sp, #28]
 8004106:	9104      	str	r1, [sp, #16]
 8004108:	4808      	ldr	r0, [pc, #32]	; (800412c <siprintf+0x38>)
 800410a:	4909      	ldr	r1, [pc, #36]	; (8004130 <siprintf+0x3c>)
 800410c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004110:	9105      	str	r1, [sp, #20]
 8004112:	6800      	ldr	r0, [r0, #0]
 8004114:	a902      	add	r1, sp, #8
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	f000 f868 	bl	80041ec <_svfiprintf_r>
 800411c:	2200      	movs	r2, #0
 800411e:	9b02      	ldr	r3, [sp, #8]
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	b01c      	add	sp, #112	; 0x70
 8004124:	f85d eb04 	ldr.w	lr, [sp], #4
 8004128:	b003      	add	sp, #12
 800412a:	4770      	bx	lr
 800412c:	20000034 	.word	0x20000034
 8004130:	ffff0208 	.word	0xffff0208

08004134 <__ssputs_r>:
 8004134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	688e      	ldr	r6, [r1, #8]
 800413a:	4682      	mov	sl, r0
 800413c:	429e      	cmp	r6, r3
 800413e:	460c      	mov	r4, r1
 8004140:	4690      	mov	r8, r2
 8004142:	461f      	mov	r7, r3
 8004144:	d838      	bhi.n	80041b8 <__ssputs_r+0x84>
 8004146:	898a      	ldrh	r2, [r1, #12]
 8004148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800414c:	d032      	beq.n	80041b4 <__ssputs_r+0x80>
 800414e:	6825      	ldr	r5, [r4, #0]
 8004150:	6909      	ldr	r1, [r1, #16]
 8004152:	3301      	adds	r3, #1
 8004154:	eba5 0901 	sub.w	r9, r5, r1
 8004158:	6965      	ldr	r5, [r4, #20]
 800415a:	444b      	add	r3, r9
 800415c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004164:	106d      	asrs	r5, r5, #1
 8004166:	429d      	cmp	r5, r3
 8004168:	bf38      	it	cc
 800416a:	461d      	movcc	r5, r3
 800416c:	0553      	lsls	r3, r2, #21
 800416e:	d531      	bpl.n	80041d4 <__ssputs_r+0xa0>
 8004170:	4629      	mov	r1, r5
 8004172:	f000 fb61 	bl	8004838 <_malloc_r>
 8004176:	4606      	mov	r6, r0
 8004178:	b950      	cbnz	r0, 8004190 <__ssputs_r+0x5c>
 800417a:	230c      	movs	r3, #12
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	f8ca 3000 	str.w	r3, [sl]
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004190:	464a      	mov	r2, r9
 8004192:	6921      	ldr	r1, [r4, #16]
 8004194:	f7ff ff98 	bl	80040c8 <memcpy>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800419e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	6126      	str	r6, [r4, #16]
 80041a6:	444e      	add	r6, r9
 80041a8:	6026      	str	r6, [r4, #0]
 80041aa:	463e      	mov	r6, r7
 80041ac:	6165      	str	r5, [r4, #20]
 80041ae:	eba5 0509 	sub.w	r5, r5, r9
 80041b2:	60a5      	str	r5, [r4, #8]
 80041b4:	42be      	cmp	r6, r7
 80041b6:	d900      	bls.n	80041ba <__ssputs_r+0x86>
 80041b8:	463e      	mov	r6, r7
 80041ba:	4632      	mov	r2, r6
 80041bc:	4641      	mov	r1, r8
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	f000 fab8 	bl	8004734 <memmove>
 80041c4:	68a3      	ldr	r3, [r4, #8]
 80041c6:	2000      	movs	r0, #0
 80041c8:	1b9b      	subs	r3, r3, r6
 80041ca:	60a3      	str	r3, [r4, #8]
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	4433      	add	r3, r6
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	e7db      	b.n	800418c <__ssputs_r+0x58>
 80041d4:	462a      	mov	r2, r5
 80041d6:	f000 fba3 	bl	8004920 <_realloc_r>
 80041da:	4606      	mov	r6, r0
 80041dc:	2800      	cmp	r0, #0
 80041de:	d1e1      	bne.n	80041a4 <__ssputs_r+0x70>
 80041e0:	4650      	mov	r0, sl
 80041e2:	6921      	ldr	r1, [r4, #16]
 80041e4:	f000 fac0 	bl	8004768 <_free_r>
 80041e8:	e7c7      	b.n	800417a <__ssputs_r+0x46>
	...

080041ec <_svfiprintf_r>:
 80041ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f0:	4698      	mov	r8, r3
 80041f2:	898b      	ldrh	r3, [r1, #12]
 80041f4:	4607      	mov	r7, r0
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	460d      	mov	r5, r1
 80041fa:	4614      	mov	r4, r2
 80041fc:	b09d      	sub	sp, #116	; 0x74
 80041fe:	d50e      	bpl.n	800421e <_svfiprintf_r+0x32>
 8004200:	690b      	ldr	r3, [r1, #16]
 8004202:	b963      	cbnz	r3, 800421e <_svfiprintf_r+0x32>
 8004204:	2140      	movs	r1, #64	; 0x40
 8004206:	f000 fb17 	bl	8004838 <_malloc_r>
 800420a:	6028      	str	r0, [r5, #0]
 800420c:	6128      	str	r0, [r5, #16]
 800420e:	b920      	cbnz	r0, 800421a <_svfiprintf_r+0x2e>
 8004210:	230c      	movs	r3, #12
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	e0d1      	b.n	80043be <_svfiprintf_r+0x1d2>
 800421a:	2340      	movs	r3, #64	; 0x40
 800421c:	616b      	str	r3, [r5, #20]
 800421e:	2300      	movs	r3, #0
 8004220:	9309      	str	r3, [sp, #36]	; 0x24
 8004222:	2320      	movs	r3, #32
 8004224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004228:	2330      	movs	r3, #48	; 0x30
 800422a:	f04f 0901 	mov.w	r9, #1
 800422e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80043d8 <_svfiprintf_r+0x1ec>
 8004236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800423a:	4623      	mov	r3, r4
 800423c:	469a      	mov	sl, r3
 800423e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004242:	b10a      	cbz	r2, 8004248 <_svfiprintf_r+0x5c>
 8004244:	2a25      	cmp	r2, #37	; 0x25
 8004246:	d1f9      	bne.n	800423c <_svfiprintf_r+0x50>
 8004248:	ebba 0b04 	subs.w	fp, sl, r4
 800424c:	d00b      	beq.n	8004266 <_svfiprintf_r+0x7a>
 800424e:	465b      	mov	r3, fp
 8004250:	4622      	mov	r2, r4
 8004252:	4629      	mov	r1, r5
 8004254:	4638      	mov	r0, r7
 8004256:	f7ff ff6d 	bl	8004134 <__ssputs_r>
 800425a:	3001      	adds	r0, #1
 800425c:	f000 80aa 	beq.w	80043b4 <_svfiprintf_r+0x1c8>
 8004260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004262:	445a      	add	r2, fp
 8004264:	9209      	str	r2, [sp, #36]	; 0x24
 8004266:	f89a 3000 	ldrb.w	r3, [sl]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80a2 	beq.w	80043b4 <_svfiprintf_r+0x1c8>
 8004270:	2300      	movs	r3, #0
 8004272:	f04f 32ff 	mov.w	r2, #4294967295
 8004276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800427a:	f10a 0a01 	add.w	sl, sl, #1
 800427e:	9304      	str	r3, [sp, #16]
 8004280:	9307      	str	r3, [sp, #28]
 8004282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004286:	931a      	str	r3, [sp, #104]	; 0x68
 8004288:	4654      	mov	r4, sl
 800428a:	2205      	movs	r2, #5
 800428c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004290:	4851      	ldr	r0, [pc, #324]	; (80043d8 <_svfiprintf_r+0x1ec>)
 8004292:	f000 fa41 	bl	8004718 <memchr>
 8004296:	9a04      	ldr	r2, [sp, #16]
 8004298:	b9d8      	cbnz	r0, 80042d2 <_svfiprintf_r+0xe6>
 800429a:	06d0      	lsls	r0, r2, #27
 800429c:	bf44      	itt	mi
 800429e:	2320      	movmi	r3, #32
 80042a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042a4:	0711      	lsls	r1, r2, #28
 80042a6:	bf44      	itt	mi
 80042a8:	232b      	movmi	r3, #43	; 0x2b
 80042aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ae:	f89a 3000 	ldrb.w	r3, [sl]
 80042b2:	2b2a      	cmp	r3, #42	; 0x2a
 80042b4:	d015      	beq.n	80042e2 <_svfiprintf_r+0xf6>
 80042b6:	4654      	mov	r4, sl
 80042b8:	2000      	movs	r0, #0
 80042ba:	f04f 0c0a 	mov.w	ip, #10
 80042be:	9a07      	ldr	r2, [sp, #28]
 80042c0:	4621      	mov	r1, r4
 80042c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042c6:	3b30      	subs	r3, #48	; 0x30
 80042c8:	2b09      	cmp	r3, #9
 80042ca:	d94e      	bls.n	800436a <_svfiprintf_r+0x17e>
 80042cc:	b1b0      	cbz	r0, 80042fc <_svfiprintf_r+0x110>
 80042ce:	9207      	str	r2, [sp, #28]
 80042d0:	e014      	b.n	80042fc <_svfiprintf_r+0x110>
 80042d2:	eba0 0308 	sub.w	r3, r0, r8
 80042d6:	fa09 f303 	lsl.w	r3, r9, r3
 80042da:	4313      	orrs	r3, r2
 80042dc:	46a2      	mov	sl, r4
 80042de:	9304      	str	r3, [sp, #16]
 80042e0:	e7d2      	b.n	8004288 <_svfiprintf_r+0x9c>
 80042e2:	9b03      	ldr	r3, [sp, #12]
 80042e4:	1d19      	adds	r1, r3, #4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	9103      	str	r1, [sp, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bfbb      	ittet	lt
 80042ee:	425b      	neglt	r3, r3
 80042f0:	f042 0202 	orrlt.w	r2, r2, #2
 80042f4:	9307      	strge	r3, [sp, #28]
 80042f6:	9307      	strlt	r3, [sp, #28]
 80042f8:	bfb8      	it	lt
 80042fa:	9204      	strlt	r2, [sp, #16]
 80042fc:	7823      	ldrb	r3, [r4, #0]
 80042fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004300:	d10c      	bne.n	800431c <_svfiprintf_r+0x130>
 8004302:	7863      	ldrb	r3, [r4, #1]
 8004304:	2b2a      	cmp	r3, #42	; 0x2a
 8004306:	d135      	bne.n	8004374 <_svfiprintf_r+0x188>
 8004308:	9b03      	ldr	r3, [sp, #12]
 800430a:	3402      	adds	r4, #2
 800430c:	1d1a      	adds	r2, r3, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	9203      	str	r2, [sp, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	bfb8      	it	lt
 8004316:	f04f 33ff 	movlt.w	r3, #4294967295
 800431a:	9305      	str	r3, [sp, #20]
 800431c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80043dc <_svfiprintf_r+0x1f0>
 8004320:	2203      	movs	r2, #3
 8004322:	4650      	mov	r0, sl
 8004324:	7821      	ldrb	r1, [r4, #0]
 8004326:	f000 f9f7 	bl	8004718 <memchr>
 800432a:	b140      	cbz	r0, 800433e <_svfiprintf_r+0x152>
 800432c:	2340      	movs	r3, #64	; 0x40
 800432e:	eba0 000a 	sub.w	r0, r0, sl
 8004332:	fa03 f000 	lsl.w	r0, r3, r0
 8004336:	9b04      	ldr	r3, [sp, #16]
 8004338:	3401      	adds	r4, #1
 800433a:	4303      	orrs	r3, r0
 800433c:	9304      	str	r3, [sp, #16]
 800433e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004342:	2206      	movs	r2, #6
 8004344:	4826      	ldr	r0, [pc, #152]	; (80043e0 <_svfiprintf_r+0x1f4>)
 8004346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800434a:	f000 f9e5 	bl	8004718 <memchr>
 800434e:	2800      	cmp	r0, #0
 8004350:	d038      	beq.n	80043c4 <_svfiprintf_r+0x1d8>
 8004352:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <_svfiprintf_r+0x1f8>)
 8004354:	bb1b      	cbnz	r3, 800439e <_svfiprintf_r+0x1b2>
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	3307      	adds	r3, #7
 800435a:	f023 0307 	bic.w	r3, r3, #7
 800435e:	3308      	adds	r3, #8
 8004360:	9303      	str	r3, [sp, #12]
 8004362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004364:	4433      	add	r3, r6
 8004366:	9309      	str	r3, [sp, #36]	; 0x24
 8004368:	e767      	b.n	800423a <_svfiprintf_r+0x4e>
 800436a:	460c      	mov	r4, r1
 800436c:	2001      	movs	r0, #1
 800436e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004372:	e7a5      	b.n	80042c0 <_svfiprintf_r+0xd4>
 8004374:	2300      	movs	r3, #0
 8004376:	f04f 0c0a 	mov.w	ip, #10
 800437a:	4619      	mov	r1, r3
 800437c:	3401      	adds	r4, #1
 800437e:	9305      	str	r3, [sp, #20]
 8004380:	4620      	mov	r0, r4
 8004382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004386:	3a30      	subs	r2, #48	; 0x30
 8004388:	2a09      	cmp	r2, #9
 800438a:	d903      	bls.n	8004394 <_svfiprintf_r+0x1a8>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0c5      	beq.n	800431c <_svfiprintf_r+0x130>
 8004390:	9105      	str	r1, [sp, #20]
 8004392:	e7c3      	b.n	800431c <_svfiprintf_r+0x130>
 8004394:	4604      	mov	r4, r0
 8004396:	2301      	movs	r3, #1
 8004398:	fb0c 2101 	mla	r1, ip, r1, r2
 800439c:	e7f0      	b.n	8004380 <_svfiprintf_r+0x194>
 800439e:	ab03      	add	r3, sp, #12
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	462a      	mov	r2, r5
 80043a4:	4638      	mov	r0, r7
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <_svfiprintf_r+0x1fc>)
 80043a8:	a904      	add	r1, sp, #16
 80043aa:	f3af 8000 	nop.w
 80043ae:	1c42      	adds	r2, r0, #1
 80043b0:	4606      	mov	r6, r0
 80043b2:	d1d6      	bne.n	8004362 <_svfiprintf_r+0x176>
 80043b4:	89ab      	ldrh	r3, [r5, #12]
 80043b6:	065b      	lsls	r3, r3, #25
 80043b8:	f53f af2c 	bmi.w	8004214 <_svfiprintf_r+0x28>
 80043bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043be:	b01d      	add	sp, #116	; 0x74
 80043c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c4:	ab03      	add	r3, sp, #12
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	462a      	mov	r2, r5
 80043ca:	4638      	mov	r0, r7
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <_svfiprintf_r+0x1fc>)
 80043ce:	a904      	add	r1, sp, #16
 80043d0:	f000 f87c 	bl	80044cc <_printf_i>
 80043d4:	e7eb      	b.n	80043ae <_svfiprintf_r+0x1c2>
 80043d6:	bf00      	nop
 80043d8:	08007248 	.word	0x08007248
 80043dc:	0800724e 	.word	0x0800724e
 80043e0:	08007252 	.word	0x08007252
 80043e4:	00000000 	.word	0x00000000
 80043e8:	08004135 	.word	0x08004135

080043ec <_printf_common>:
 80043ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f0:	4616      	mov	r6, r2
 80043f2:	4699      	mov	r9, r3
 80043f4:	688a      	ldr	r2, [r1, #8]
 80043f6:	690b      	ldr	r3, [r1, #16]
 80043f8:	4607      	mov	r7, r0
 80043fa:	4293      	cmp	r3, r2
 80043fc:	bfb8      	it	lt
 80043fe:	4613      	movlt	r3, r2
 8004400:	6033      	str	r3, [r6, #0]
 8004402:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004406:	460c      	mov	r4, r1
 8004408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800440c:	b10a      	cbz	r2, 8004412 <_printf_common+0x26>
 800440e:	3301      	adds	r3, #1
 8004410:	6033      	str	r3, [r6, #0]
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	0699      	lsls	r1, r3, #26
 8004416:	bf42      	ittt	mi
 8004418:	6833      	ldrmi	r3, [r6, #0]
 800441a:	3302      	addmi	r3, #2
 800441c:	6033      	strmi	r3, [r6, #0]
 800441e:	6825      	ldr	r5, [r4, #0]
 8004420:	f015 0506 	ands.w	r5, r5, #6
 8004424:	d106      	bne.n	8004434 <_printf_common+0x48>
 8004426:	f104 0a19 	add.w	sl, r4, #25
 800442a:	68e3      	ldr	r3, [r4, #12]
 800442c:	6832      	ldr	r2, [r6, #0]
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	42ab      	cmp	r3, r5
 8004432:	dc28      	bgt.n	8004486 <_printf_common+0x9a>
 8004434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004438:	1e13      	subs	r3, r2, #0
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	bf18      	it	ne
 800443e:	2301      	movne	r3, #1
 8004440:	0692      	lsls	r2, r2, #26
 8004442:	d42d      	bmi.n	80044a0 <_printf_common+0xb4>
 8004444:	4649      	mov	r1, r9
 8004446:	4638      	mov	r0, r7
 8004448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800444c:	47c0      	blx	r8
 800444e:	3001      	adds	r0, #1
 8004450:	d020      	beq.n	8004494 <_printf_common+0xa8>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	68e5      	ldr	r5, [r4, #12]
 8004456:	f003 0306 	and.w	r3, r3, #6
 800445a:	2b04      	cmp	r3, #4
 800445c:	bf18      	it	ne
 800445e:	2500      	movne	r5, #0
 8004460:	6832      	ldr	r2, [r6, #0]
 8004462:	f04f 0600 	mov.w	r6, #0
 8004466:	68a3      	ldr	r3, [r4, #8]
 8004468:	bf08      	it	eq
 800446a:	1aad      	subeq	r5, r5, r2
 800446c:	6922      	ldr	r2, [r4, #16]
 800446e:	bf08      	it	eq
 8004470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004474:	4293      	cmp	r3, r2
 8004476:	bfc4      	itt	gt
 8004478:	1a9b      	subgt	r3, r3, r2
 800447a:	18ed      	addgt	r5, r5, r3
 800447c:	341a      	adds	r4, #26
 800447e:	42b5      	cmp	r5, r6
 8004480:	d11a      	bne.n	80044b8 <_printf_common+0xcc>
 8004482:	2000      	movs	r0, #0
 8004484:	e008      	b.n	8004498 <_printf_common+0xac>
 8004486:	2301      	movs	r3, #1
 8004488:	4652      	mov	r2, sl
 800448a:	4649      	mov	r1, r9
 800448c:	4638      	mov	r0, r7
 800448e:	47c0      	blx	r8
 8004490:	3001      	adds	r0, #1
 8004492:	d103      	bne.n	800449c <_printf_common+0xb0>
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449c:	3501      	adds	r5, #1
 800449e:	e7c4      	b.n	800442a <_printf_common+0x3e>
 80044a0:	2030      	movs	r0, #48	; 0x30
 80044a2:	18e1      	adds	r1, r4, r3
 80044a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ae:	4422      	add	r2, r4
 80044b0:	3302      	adds	r3, #2
 80044b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044b6:	e7c5      	b.n	8004444 <_printf_common+0x58>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4622      	mov	r2, r4
 80044bc:	4649      	mov	r1, r9
 80044be:	4638      	mov	r0, r7
 80044c0:	47c0      	blx	r8
 80044c2:	3001      	adds	r0, #1
 80044c4:	d0e6      	beq.n	8004494 <_printf_common+0xa8>
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7d9      	b.n	800447e <_printf_common+0x92>
	...

080044cc <_printf_i>:
 80044cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	7e0f      	ldrb	r7, [r1, #24]
 80044d2:	4691      	mov	r9, r2
 80044d4:	2f78      	cmp	r7, #120	; 0x78
 80044d6:	4680      	mov	r8, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	469a      	mov	sl, r3
 80044dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044e2:	d807      	bhi.n	80044f4 <_printf_i+0x28>
 80044e4:	2f62      	cmp	r7, #98	; 0x62
 80044e6:	d80a      	bhi.n	80044fe <_printf_i+0x32>
 80044e8:	2f00      	cmp	r7, #0
 80044ea:	f000 80d9 	beq.w	80046a0 <_printf_i+0x1d4>
 80044ee:	2f58      	cmp	r7, #88	; 0x58
 80044f0:	f000 80a4 	beq.w	800463c <_printf_i+0x170>
 80044f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044fc:	e03a      	b.n	8004574 <_printf_i+0xa8>
 80044fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004502:	2b15      	cmp	r3, #21
 8004504:	d8f6      	bhi.n	80044f4 <_printf_i+0x28>
 8004506:	a101      	add	r1, pc, #4	; (adr r1, 800450c <_printf_i+0x40>)
 8004508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800450c:	08004565 	.word	0x08004565
 8004510:	08004579 	.word	0x08004579
 8004514:	080044f5 	.word	0x080044f5
 8004518:	080044f5 	.word	0x080044f5
 800451c:	080044f5 	.word	0x080044f5
 8004520:	080044f5 	.word	0x080044f5
 8004524:	08004579 	.word	0x08004579
 8004528:	080044f5 	.word	0x080044f5
 800452c:	080044f5 	.word	0x080044f5
 8004530:	080044f5 	.word	0x080044f5
 8004534:	080044f5 	.word	0x080044f5
 8004538:	08004687 	.word	0x08004687
 800453c:	080045a9 	.word	0x080045a9
 8004540:	08004669 	.word	0x08004669
 8004544:	080044f5 	.word	0x080044f5
 8004548:	080044f5 	.word	0x080044f5
 800454c:	080046a9 	.word	0x080046a9
 8004550:	080044f5 	.word	0x080044f5
 8004554:	080045a9 	.word	0x080045a9
 8004558:	080044f5 	.word	0x080044f5
 800455c:	080044f5 	.word	0x080044f5
 8004560:	08004671 	.word	0x08004671
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	602a      	str	r2, [r5, #0]
 800456c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004574:	2301      	movs	r3, #1
 8004576:	e0a4      	b.n	80046c2 <_printf_i+0x1f6>
 8004578:	6820      	ldr	r0, [r4, #0]
 800457a:	6829      	ldr	r1, [r5, #0]
 800457c:	0606      	lsls	r6, r0, #24
 800457e:	f101 0304 	add.w	r3, r1, #4
 8004582:	d50a      	bpl.n	800459a <_printf_i+0xce>
 8004584:	680e      	ldr	r6, [r1, #0]
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	2e00      	cmp	r6, #0
 800458a:	da03      	bge.n	8004594 <_printf_i+0xc8>
 800458c:	232d      	movs	r3, #45	; 0x2d
 800458e:	4276      	negs	r6, r6
 8004590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004594:	230a      	movs	r3, #10
 8004596:	485e      	ldr	r0, [pc, #376]	; (8004710 <_printf_i+0x244>)
 8004598:	e019      	b.n	80045ce <_printf_i+0x102>
 800459a:	680e      	ldr	r6, [r1, #0]
 800459c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045a0:	602b      	str	r3, [r5, #0]
 80045a2:	bf18      	it	ne
 80045a4:	b236      	sxthne	r6, r6
 80045a6:	e7ef      	b.n	8004588 <_printf_i+0xbc>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	1d19      	adds	r1, r3, #4
 80045ae:	6029      	str	r1, [r5, #0]
 80045b0:	0601      	lsls	r1, r0, #24
 80045b2:	d501      	bpl.n	80045b8 <_printf_i+0xec>
 80045b4:	681e      	ldr	r6, [r3, #0]
 80045b6:	e002      	b.n	80045be <_printf_i+0xf2>
 80045b8:	0646      	lsls	r6, r0, #25
 80045ba:	d5fb      	bpl.n	80045b4 <_printf_i+0xe8>
 80045bc:	881e      	ldrh	r6, [r3, #0]
 80045be:	2f6f      	cmp	r7, #111	; 0x6f
 80045c0:	bf0c      	ite	eq
 80045c2:	2308      	moveq	r3, #8
 80045c4:	230a      	movne	r3, #10
 80045c6:	4852      	ldr	r0, [pc, #328]	; (8004710 <_printf_i+0x244>)
 80045c8:	2100      	movs	r1, #0
 80045ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045ce:	6865      	ldr	r5, [r4, #4]
 80045d0:	2d00      	cmp	r5, #0
 80045d2:	bfa8      	it	ge
 80045d4:	6821      	ldrge	r1, [r4, #0]
 80045d6:	60a5      	str	r5, [r4, #8]
 80045d8:	bfa4      	itt	ge
 80045da:	f021 0104 	bicge.w	r1, r1, #4
 80045de:	6021      	strge	r1, [r4, #0]
 80045e0:	b90e      	cbnz	r6, 80045e6 <_printf_i+0x11a>
 80045e2:	2d00      	cmp	r5, #0
 80045e4:	d04d      	beq.n	8004682 <_printf_i+0x1b6>
 80045e6:	4615      	mov	r5, r2
 80045e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80045ec:	fb03 6711 	mls	r7, r3, r1, r6
 80045f0:	5dc7      	ldrb	r7, [r0, r7]
 80045f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045f6:	4637      	mov	r7, r6
 80045f8:	42bb      	cmp	r3, r7
 80045fa:	460e      	mov	r6, r1
 80045fc:	d9f4      	bls.n	80045e8 <_printf_i+0x11c>
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d10b      	bne.n	800461a <_printf_i+0x14e>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	07de      	lsls	r6, r3, #31
 8004606:	d508      	bpl.n	800461a <_printf_i+0x14e>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	6861      	ldr	r1, [r4, #4]
 800460c:	4299      	cmp	r1, r3
 800460e:	bfde      	ittt	le
 8004610:	2330      	movle	r3, #48	; 0x30
 8004612:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004616:	f105 35ff 	addle.w	r5, r5, #4294967295
 800461a:	1b52      	subs	r2, r2, r5
 800461c:	6122      	str	r2, [r4, #16]
 800461e:	464b      	mov	r3, r9
 8004620:	4621      	mov	r1, r4
 8004622:	4640      	mov	r0, r8
 8004624:	f8cd a000 	str.w	sl, [sp]
 8004628:	aa03      	add	r2, sp, #12
 800462a:	f7ff fedf 	bl	80043ec <_printf_common>
 800462e:	3001      	adds	r0, #1
 8004630:	d14c      	bne.n	80046cc <_printf_i+0x200>
 8004632:	f04f 30ff 	mov.w	r0, #4294967295
 8004636:	b004      	add	sp, #16
 8004638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463c:	4834      	ldr	r0, [pc, #208]	; (8004710 <_printf_i+0x244>)
 800463e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004642:	6829      	ldr	r1, [r5, #0]
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	f851 6b04 	ldr.w	r6, [r1], #4
 800464a:	6029      	str	r1, [r5, #0]
 800464c:	061d      	lsls	r5, r3, #24
 800464e:	d514      	bpl.n	800467a <_printf_i+0x1ae>
 8004650:	07df      	lsls	r7, r3, #31
 8004652:	bf44      	itt	mi
 8004654:	f043 0320 	orrmi.w	r3, r3, #32
 8004658:	6023      	strmi	r3, [r4, #0]
 800465a:	b91e      	cbnz	r6, 8004664 <_printf_i+0x198>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	f023 0320 	bic.w	r3, r3, #32
 8004662:	6023      	str	r3, [r4, #0]
 8004664:	2310      	movs	r3, #16
 8004666:	e7af      	b.n	80045c8 <_printf_i+0xfc>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	f043 0320 	orr.w	r3, r3, #32
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	2378      	movs	r3, #120	; 0x78
 8004672:	4828      	ldr	r0, [pc, #160]	; (8004714 <_printf_i+0x248>)
 8004674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004678:	e7e3      	b.n	8004642 <_printf_i+0x176>
 800467a:	0659      	lsls	r1, r3, #25
 800467c:	bf48      	it	mi
 800467e:	b2b6      	uxthmi	r6, r6
 8004680:	e7e6      	b.n	8004650 <_printf_i+0x184>
 8004682:	4615      	mov	r5, r2
 8004684:	e7bb      	b.n	80045fe <_printf_i+0x132>
 8004686:	682b      	ldr	r3, [r5, #0]
 8004688:	6826      	ldr	r6, [r4, #0]
 800468a:	1d18      	adds	r0, r3, #4
 800468c:	6961      	ldr	r1, [r4, #20]
 800468e:	6028      	str	r0, [r5, #0]
 8004690:	0635      	lsls	r5, r6, #24
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	d501      	bpl.n	800469a <_printf_i+0x1ce>
 8004696:	6019      	str	r1, [r3, #0]
 8004698:	e002      	b.n	80046a0 <_printf_i+0x1d4>
 800469a:	0670      	lsls	r0, r6, #25
 800469c:	d5fb      	bpl.n	8004696 <_printf_i+0x1ca>
 800469e:	8019      	strh	r1, [r3, #0]
 80046a0:	2300      	movs	r3, #0
 80046a2:	4615      	mov	r5, r2
 80046a4:	6123      	str	r3, [r4, #16]
 80046a6:	e7ba      	b.n	800461e <_printf_i+0x152>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	2100      	movs	r1, #0
 80046ac:	1d1a      	adds	r2, r3, #4
 80046ae:	602a      	str	r2, [r5, #0]
 80046b0:	681d      	ldr	r5, [r3, #0]
 80046b2:	6862      	ldr	r2, [r4, #4]
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 f82f 	bl	8004718 <memchr>
 80046ba:	b108      	cbz	r0, 80046c0 <_printf_i+0x1f4>
 80046bc:	1b40      	subs	r0, r0, r5
 80046be:	6060      	str	r0, [r4, #4]
 80046c0:	6863      	ldr	r3, [r4, #4]
 80046c2:	6123      	str	r3, [r4, #16]
 80046c4:	2300      	movs	r3, #0
 80046c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ca:	e7a8      	b.n	800461e <_printf_i+0x152>
 80046cc:	462a      	mov	r2, r5
 80046ce:	4649      	mov	r1, r9
 80046d0:	4640      	mov	r0, r8
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	47d0      	blx	sl
 80046d6:	3001      	adds	r0, #1
 80046d8:	d0ab      	beq.n	8004632 <_printf_i+0x166>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	079b      	lsls	r3, r3, #30
 80046de:	d413      	bmi.n	8004708 <_printf_i+0x23c>
 80046e0:	68e0      	ldr	r0, [r4, #12]
 80046e2:	9b03      	ldr	r3, [sp, #12]
 80046e4:	4298      	cmp	r0, r3
 80046e6:	bfb8      	it	lt
 80046e8:	4618      	movlt	r0, r3
 80046ea:	e7a4      	b.n	8004636 <_printf_i+0x16a>
 80046ec:	2301      	movs	r3, #1
 80046ee:	4632      	mov	r2, r6
 80046f0:	4649      	mov	r1, r9
 80046f2:	4640      	mov	r0, r8
 80046f4:	47d0      	blx	sl
 80046f6:	3001      	adds	r0, #1
 80046f8:	d09b      	beq.n	8004632 <_printf_i+0x166>
 80046fa:	3501      	adds	r5, #1
 80046fc:	68e3      	ldr	r3, [r4, #12]
 80046fe:	9903      	ldr	r1, [sp, #12]
 8004700:	1a5b      	subs	r3, r3, r1
 8004702:	42ab      	cmp	r3, r5
 8004704:	dcf2      	bgt.n	80046ec <_printf_i+0x220>
 8004706:	e7eb      	b.n	80046e0 <_printf_i+0x214>
 8004708:	2500      	movs	r5, #0
 800470a:	f104 0619 	add.w	r6, r4, #25
 800470e:	e7f5      	b.n	80046fc <_printf_i+0x230>
 8004710:	08007259 	.word	0x08007259
 8004714:	0800726a 	.word	0x0800726a

08004718 <memchr>:
 8004718:	4603      	mov	r3, r0
 800471a:	b510      	push	{r4, lr}
 800471c:	b2c9      	uxtb	r1, r1
 800471e:	4402      	add	r2, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	4618      	mov	r0, r3
 8004724:	d101      	bne.n	800472a <memchr+0x12>
 8004726:	2000      	movs	r0, #0
 8004728:	e003      	b.n	8004732 <memchr+0x1a>
 800472a:	7804      	ldrb	r4, [r0, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	428c      	cmp	r4, r1
 8004730:	d1f6      	bne.n	8004720 <memchr+0x8>
 8004732:	bd10      	pop	{r4, pc}

08004734 <memmove>:
 8004734:	4288      	cmp	r0, r1
 8004736:	b510      	push	{r4, lr}
 8004738:	eb01 0402 	add.w	r4, r1, r2
 800473c:	d902      	bls.n	8004744 <memmove+0x10>
 800473e:	4284      	cmp	r4, r0
 8004740:	4623      	mov	r3, r4
 8004742:	d807      	bhi.n	8004754 <memmove+0x20>
 8004744:	1e43      	subs	r3, r0, #1
 8004746:	42a1      	cmp	r1, r4
 8004748:	d008      	beq.n	800475c <memmove+0x28>
 800474a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800474e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004752:	e7f8      	b.n	8004746 <memmove+0x12>
 8004754:	4601      	mov	r1, r0
 8004756:	4402      	add	r2, r0
 8004758:	428a      	cmp	r2, r1
 800475a:	d100      	bne.n	800475e <memmove+0x2a>
 800475c:	bd10      	pop	{r4, pc}
 800475e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004766:	e7f7      	b.n	8004758 <memmove+0x24>

08004768 <_free_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4605      	mov	r5, r0
 800476c:	2900      	cmp	r1, #0
 800476e:	d040      	beq.n	80047f2 <_free_r+0x8a>
 8004770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004774:	1f0c      	subs	r4, r1, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	bfb8      	it	lt
 800477a:	18e4      	addlt	r4, r4, r3
 800477c:	f000 f910 	bl	80049a0 <__malloc_lock>
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <_free_r+0x8c>)
 8004782:	6813      	ldr	r3, [r2, #0]
 8004784:	b933      	cbnz	r3, 8004794 <_free_r+0x2c>
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	6014      	str	r4, [r2, #0]
 800478a:	4628      	mov	r0, r5
 800478c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004790:	f000 b90c 	b.w	80049ac <__malloc_unlock>
 8004794:	42a3      	cmp	r3, r4
 8004796:	d908      	bls.n	80047aa <_free_r+0x42>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	1821      	adds	r1, r4, r0
 800479c:	428b      	cmp	r3, r1
 800479e:	bf01      	itttt	eq
 80047a0:	6819      	ldreq	r1, [r3, #0]
 80047a2:	685b      	ldreq	r3, [r3, #4]
 80047a4:	1809      	addeq	r1, r1, r0
 80047a6:	6021      	streq	r1, [r4, #0]
 80047a8:	e7ed      	b.n	8004786 <_free_r+0x1e>
 80047aa:	461a      	mov	r2, r3
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b10b      	cbz	r3, 80047b4 <_free_r+0x4c>
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d9fa      	bls.n	80047aa <_free_r+0x42>
 80047b4:	6811      	ldr	r1, [r2, #0]
 80047b6:	1850      	adds	r0, r2, r1
 80047b8:	42a0      	cmp	r0, r4
 80047ba:	d10b      	bne.n	80047d4 <_free_r+0x6c>
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	4401      	add	r1, r0
 80047c0:	1850      	adds	r0, r2, r1
 80047c2:	4283      	cmp	r3, r0
 80047c4:	6011      	str	r1, [r2, #0]
 80047c6:	d1e0      	bne.n	800478a <_free_r+0x22>
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4401      	add	r1, r0
 80047ce:	6011      	str	r1, [r2, #0]
 80047d0:	6053      	str	r3, [r2, #4]
 80047d2:	e7da      	b.n	800478a <_free_r+0x22>
 80047d4:	d902      	bls.n	80047dc <_free_r+0x74>
 80047d6:	230c      	movs	r3, #12
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	e7d6      	b.n	800478a <_free_r+0x22>
 80047dc:	6820      	ldr	r0, [r4, #0]
 80047de:	1821      	adds	r1, r4, r0
 80047e0:	428b      	cmp	r3, r1
 80047e2:	bf01      	itttt	eq
 80047e4:	6819      	ldreq	r1, [r3, #0]
 80047e6:	685b      	ldreq	r3, [r3, #4]
 80047e8:	1809      	addeq	r1, r1, r0
 80047ea:	6021      	streq	r1, [r4, #0]
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	6054      	str	r4, [r2, #4]
 80047f0:	e7cb      	b.n	800478a <_free_r+0x22>
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	20000608 	.word	0x20000608

080047f8 <sbrk_aligned>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4e0e      	ldr	r6, [pc, #56]	; (8004834 <sbrk_aligned+0x3c>)
 80047fc:	460c      	mov	r4, r1
 80047fe:	6831      	ldr	r1, [r6, #0]
 8004800:	4605      	mov	r5, r0
 8004802:	b911      	cbnz	r1, 800480a <sbrk_aligned+0x12>
 8004804:	f000 f8bc 	bl	8004980 <_sbrk_r>
 8004808:	6030      	str	r0, [r6, #0]
 800480a:	4621      	mov	r1, r4
 800480c:	4628      	mov	r0, r5
 800480e:	f000 f8b7 	bl	8004980 <_sbrk_r>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	d00a      	beq.n	800482c <sbrk_aligned+0x34>
 8004816:	1cc4      	adds	r4, r0, #3
 8004818:	f024 0403 	bic.w	r4, r4, #3
 800481c:	42a0      	cmp	r0, r4
 800481e:	d007      	beq.n	8004830 <sbrk_aligned+0x38>
 8004820:	1a21      	subs	r1, r4, r0
 8004822:	4628      	mov	r0, r5
 8004824:	f000 f8ac 	bl	8004980 <_sbrk_r>
 8004828:	3001      	adds	r0, #1
 800482a:	d101      	bne.n	8004830 <sbrk_aligned+0x38>
 800482c:	f04f 34ff 	mov.w	r4, #4294967295
 8004830:	4620      	mov	r0, r4
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	2000060c 	.word	0x2000060c

08004838 <_malloc_r>:
 8004838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800483c:	1ccd      	adds	r5, r1, #3
 800483e:	f025 0503 	bic.w	r5, r5, #3
 8004842:	3508      	adds	r5, #8
 8004844:	2d0c      	cmp	r5, #12
 8004846:	bf38      	it	cc
 8004848:	250c      	movcc	r5, #12
 800484a:	2d00      	cmp	r5, #0
 800484c:	4607      	mov	r7, r0
 800484e:	db01      	blt.n	8004854 <_malloc_r+0x1c>
 8004850:	42a9      	cmp	r1, r5
 8004852:	d905      	bls.n	8004860 <_malloc_r+0x28>
 8004854:	230c      	movs	r3, #12
 8004856:	2600      	movs	r6, #0
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4630      	mov	r0, r6
 800485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004860:	4e2e      	ldr	r6, [pc, #184]	; (800491c <_malloc_r+0xe4>)
 8004862:	f000 f89d 	bl	80049a0 <__malloc_lock>
 8004866:	6833      	ldr	r3, [r6, #0]
 8004868:	461c      	mov	r4, r3
 800486a:	bb34      	cbnz	r4, 80048ba <_malloc_r+0x82>
 800486c:	4629      	mov	r1, r5
 800486e:	4638      	mov	r0, r7
 8004870:	f7ff ffc2 	bl	80047f8 <sbrk_aligned>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	4604      	mov	r4, r0
 8004878:	d14d      	bne.n	8004916 <_malloc_r+0xde>
 800487a:	6834      	ldr	r4, [r6, #0]
 800487c:	4626      	mov	r6, r4
 800487e:	2e00      	cmp	r6, #0
 8004880:	d140      	bne.n	8004904 <_malloc_r+0xcc>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	4631      	mov	r1, r6
 8004886:	4638      	mov	r0, r7
 8004888:	eb04 0803 	add.w	r8, r4, r3
 800488c:	f000 f878 	bl	8004980 <_sbrk_r>
 8004890:	4580      	cmp	r8, r0
 8004892:	d13a      	bne.n	800490a <_malloc_r+0xd2>
 8004894:	6821      	ldr	r1, [r4, #0]
 8004896:	3503      	adds	r5, #3
 8004898:	1a6d      	subs	r5, r5, r1
 800489a:	f025 0503 	bic.w	r5, r5, #3
 800489e:	3508      	adds	r5, #8
 80048a0:	2d0c      	cmp	r5, #12
 80048a2:	bf38      	it	cc
 80048a4:	250c      	movcc	r5, #12
 80048a6:	4638      	mov	r0, r7
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7ff ffa5 	bl	80047f8 <sbrk_aligned>
 80048ae:	3001      	adds	r0, #1
 80048b0:	d02b      	beq.n	800490a <_malloc_r+0xd2>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	442b      	add	r3, r5
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	e00e      	b.n	80048d8 <_malloc_r+0xa0>
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	1b52      	subs	r2, r2, r5
 80048be:	d41e      	bmi.n	80048fe <_malloc_r+0xc6>
 80048c0:	2a0b      	cmp	r2, #11
 80048c2:	d916      	bls.n	80048f2 <_malloc_r+0xba>
 80048c4:	1961      	adds	r1, r4, r5
 80048c6:	42a3      	cmp	r3, r4
 80048c8:	6025      	str	r5, [r4, #0]
 80048ca:	bf18      	it	ne
 80048cc:	6059      	strne	r1, [r3, #4]
 80048ce:	6863      	ldr	r3, [r4, #4]
 80048d0:	bf08      	it	eq
 80048d2:	6031      	streq	r1, [r6, #0]
 80048d4:	5162      	str	r2, [r4, r5]
 80048d6:	604b      	str	r3, [r1, #4]
 80048d8:	4638      	mov	r0, r7
 80048da:	f104 060b 	add.w	r6, r4, #11
 80048de:	f000 f865 	bl	80049ac <__malloc_unlock>
 80048e2:	f026 0607 	bic.w	r6, r6, #7
 80048e6:	1d23      	adds	r3, r4, #4
 80048e8:	1af2      	subs	r2, r6, r3
 80048ea:	d0b6      	beq.n	800485a <_malloc_r+0x22>
 80048ec:	1b9b      	subs	r3, r3, r6
 80048ee:	50a3      	str	r3, [r4, r2]
 80048f0:	e7b3      	b.n	800485a <_malloc_r+0x22>
 80048f2:	6862      	ldr	r2, [r4, #4]
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	bf0c      	ite	eq
 80048f8:	6032      	streq	r2, [r6, #0]
 80048fa:	605a      	strne	r2, [r3, #4]
 80048fc:	e7ec      	b.n	80048d8 <_malloc_r+0xa0>
 80048fe:	4623      	mov	r3, r4
 8004900:	6864      	ldr	r4, [r4, #4]
 8004902:	e7b2      	b.n	800486a <_malloc_r+0x32>
 8004904:	4634      	mov	r4, r6
 8004906:	6876      	ldr	r6, [r6, #4]
 8004908:	e7b9      	b.n	800487e <_malloc_r+0x46>
 800490a:	230c      	movs	r3, #12
 800490c:	4638      	mov	r0, r7
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	f000 f84c 	bl	80049ac <__malloc_unlock>
 8004914:	e7a1      	b.n	800485a <_malloc_r+0x22>
 8004916:	6025      	str	r5, [r4, #0]
 8004918:	e7de      	b.n	80048d8 <_malloc_r+0xa0>
 800491a:	bf00      	nop
 800491c:	20000608 	.word	0x20000608

08004920 <_realloc_r>:
 8004920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004924:	4680      	mov	r8, r0
 8004926:	4614      	mov	r4, r2
 8004928:	460e      	mov	r6, r1
 800492a:	b921      	cbnz	r1, 8004936 <_realloc_r+0x16>
 800492c:	4611      	mov	r1, r2
 800492e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004932:	f7ff bf81 	b.w	8004838 <_malloc_r>
 8004936:	b92a      	cbnz	r2, 8004944 <_realloc_r+0x24>
 8004938:	f7ff ff16 	bl	8004768 <_free_r>
 800493c:	4625      	mov	r5, r4
 800493e:	4628      	mov	r0, r5
 8004940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004944:	f000 f838 	bl	80049b8 <_malloc_usable_size_r>
 8004948:	4284      	cmp	r4, r0
 800494a:	4607      	mov	r7, r0
 800494c:	d802      	bhi.n	8004954 <_realloc_r+0x34>
 800494e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004952:	d812      	bhi.n	800497a <_realloc_r+0x5a>
 8004954:	4621      	mov	r1, r4
 8004956:	4640      	mov	r0, r8
 8004958:	f7ff ff6e 	bl	8004838 <_malloc_r>
 800495c:	4605      	mov	r5, r0
 800495e:	2800      	cmp	r0, #0
 8004960:	d0ed      	beq.n	800493e <_realloc_r+0x1e>
 8004962:	42bc      	cmp	r4, r7
 8004964:	4622      	mov	r2, r4
 8004966:	4631      	mov	r1, r6
 8004968:	bf28      	it	cs
 800496a:	463a      	movcs	r2, r7
 800496c:	f7ff fbac 	bl	80040c8 <memcpy>
 8004970:	4631      	mov	r1, r6
 8004972:	4640      	mov	r0, r8
 8004974:	f7ff fef8 	bl	8004768 <_free_r>
 8004978:	e7e1      	b.n	800493e <_realloc_r+0x1e>
 800497a:	4635      	mov	r5, r6
 800497c:	e7df      	b.n	800493e <_realloc_r+0x1e>
	...

08004980 <_sbrk_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	2300      	movs	r3, #0
 8004984:	4d05      	ldr	r5, [pc, #20]	; (800499c <_sbrk_r+0x1c>)
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f7fc fba4 	bl	80010d8 <_sbrk>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_sbrk_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_sbrk_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	20000610 	.word	0x20000610

080049a0 <__malloc_lock>:
 80049a0:	4801      	ldr	r0, [pc, #4]	; (80049a8 <__malloc_lock+0x8>)
 80049a2:	f000 b811 	b.w	80049c8 <__retarget_lock_acquire_recursive>
 80049a6:	bf00      	nop
 80049a8:	20000614 	.word	0x20000614

080049ac <__malloc_unlock>:
 80049ac:	4801      	ldr	r0, [pc, #4]	; (80049b4 <__malloc_unlock+0x8>)
 80049ae:	f000 b80c 	b.w	80049ca <__retarget_lock_release_recursive>
 80049b2:	bf00      	nop
 80049b4:	20000614 	.word	0x20000614

080049b8 <_malloc_usable_size_r>:
 80049b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049bc:	1f18      	subs	r0, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bfbc      	itt	lt
 80049c2:	580b      	ldrlt	r3, [r1, r0]
 80049c4:	18c0      	addlt	r0, r0, r3
 80049c6:	4770      	bx	lr

080049c8 <__retarget_lock_acquire_recursive>:
 80049c8:	4770      	bx	lr

080049ca <__retarget_lock_release_recursive>:
 80049ca:	4770      	bx	lr

080049cc <_init>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr

080049d8 <_fini>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr
